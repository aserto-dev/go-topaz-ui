{"version":3,"file":"static/js/5871.f53f61d2.chunk.js","mappings":"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","sources":["api/internal.ts","lib/availability/UseIsAuthorizerInstanceNameAvailable.ts","lib/validation/AsertoNameValidator.ts","components/authorizers/AuthorizerModal/styles.tsx","components/authorizers/AuthorizerModal/index.tsx","components/DeleteConfirmationModal/styles.ts","components/DeleteConfirmationModal/index.tsx","components/authorizers/ManageAuthorizer/styles.tsx","components/authorizers/ManageAuthorizer/index.tsx","views/PolicyInstance/views/Settings/styles.tsx","views/PolicyInstance/views/Settings/index.tsx"],"sourcesContent":["import { useMutation, useQuery, useQueryClient, UseQueryOptions } from 'react-query'\n\nimport {\n  AddAuthorizerInstanceResponse,\n  AuthorizerInstance,\n  AuthorizerNameAvailableResponse,\n} from '../../common/types'\nimport { useInternalClient } from '../clients/InternalClient'\nimport {\n  MutationKeys,\n  QueryKeys,\n  ReactQueryMutationHooks,\n  useMutationOptions,\n} from '../types/local/general'\nimport { RpcStatus } from '../types/local/tenant'\n\nexport const useAuthorizerInstances = (\n  options?: Omit<\n    UseQueryOptions<\n      AddAuthorizerInstanceResponse,\n      RpcStatus,\n      AddAuthorizerInstanceResponse,\n      QueryKeys[]\n    >,\n    'queryKey' | 'queryFn' | 'retry' | 'staleTime'\n  >\n) => {\n  const { get } = useInternalClient()\n\n  return useQuery(\n    [QueryKeys.AuthorizerInstances],\n    (): Promise<AddAuthorizerInstanceResponse> => get({ path: 'authorizers' }),\n    {\n      ...options,\n      enabled: options?.enabled,\n      retry: false,\n      staleTime: Infinity,\n    }\n  )\n}\n\nexport const useAddAuthorizerInstance = (\n  reactQueryHooks: ReactQueryMutationHooks<AuthorizerInstance, {}> = {}\n) => {\n  const mutationOptions = useMutationOptions(reactQueryHooks)\n  const { post } = useInternalClient()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    [MutationKeys.AddAuthorizerInstance],\n    (body) =>\n      post({\n        body,\n        path: `authorizers`,\n      }),\n    {\n      ...mutationOptions,\n      onSuccess: (data, context) => {\n        queryClient.invalidateQueries([QueryKeys.AuthorizerInstances])\n        queryClient.removeQueries([QueryKeys.IsAuthorizerInstanceNameAvailable, data.name])\n        mutationOptions?.onSuccess?.(data, context)\n      },\n    }\n  )\n}\n\nexport const useRemoveAuthorizerInstance = (\n  mutationHooks: ReactQueryMutationHooks<{}, string> = {}\n) => {\n  const queryClient = useQueryClient()\n  const mutationOptions = useMutationOptions(mutationHooks, QueryKeys.PoliciesData)\n  const { del } = useInternalClient()\n  return useMutation((name) => del<{}>({ path: `authorizers/${name}` }), {\n    ...mutationOptions,\n    onSuccess: (data, context) => {\n      queryClient.removeQueries([QueryKeys.AuthorizerInstances])\n      mutationOptions?.onSuccess?.(data, context)\n    },\n  })\n}\n\nexport const useIsAuthorizerInstanceNameAvailable = (\n  instanceName: string,\n  options?: Omit<\n    UseQueryOptions<\n      AuthorizerNameAvailableResponse,\n      RpcStatus,\n      AuthorizerNameAvailableResponse,\n      QueryKeys[]\n    >,\n    'queryKey' | 'queryFn' | 'retry' | 'staleTime'\n  >\n) => {\n  const { get } = useInternalClient()\n  return useQuery(\n    [QueryKeys.IsAuthorizerInstanceNameAvailable, instanceName as QueryKeys],\n    () =>\n      get<AuthorizerNameAvailableResponse>({\n        path: `authorizers/available/${instanceName}`,\n      }),\n    {\n      ...options,\n      enabled: !!instanceName && options?.enabled,\n      retry: false,\n      staleTime: Infinity,\n    }\n  )\n}\n","import { useMemo } from 'react'\nimport {\n  getAvailabilityReasonForConsole,\n  useIsAvailableDebounced,\n  UseIsNameAvailable,\n} from '@aserto/console-common'\n\nimport { useIsAuthorizerInstanceNameAvailable } from '../../api/internal'\n\nconst useIsAuthorizerNameAvailable = (): UseIsNameAvailable =>\n  useMemo(() => {\n    const useIsAuthorizerNameAvailableInternal = (name: string, defaultName: string) => {\n      const queryResult = useIsAuthorizerInstanceNameAvailable(name, {\n        enabled: name !== defaultName,\n      })\n\n      const response = useMemo(() => {\n        const isAvailable =\n          !queryResult?.data?.availability ||\n          queryResult?.data?.availability === 'NAME_AVAILABILITY_AVAILABLE'\n\n        return {\n          isAvailable: isAvailable,\n          reason: getAvailabilityReasonForConsole(queryResult?.data?.reason),\n        }\n      }, [queryResult?.data])\n\n      return response\n    }\n\n    const useIsAuthorizerNameAvailableDebounced = (key: string, defaultkey: string) => {\n      const useRunTarget = () => useIsAvailableDebounced(useIsAuthorizerNameAvailableInternal)\n      const run = useMemo(useRunTarget, [])\n      return run(key, defaultkey)\n    }\n    return useIsAuthorizerNameAvailableDebounced\n  }, [])\n\nexport default useIsAuthorizerNameAvailable\n","import { Validator, Validity } from '@aserto/console-common'\n// Must start with a-z, and must be alphanumeric (or dashes) 6-30 characters\nconst ASERTO_NAME_REGEXP = /^[a-z][a-z0-9-]{3,29}$/\nconst ASERTO_NAME_FRAGMENT_REGEXP = /^[a-z][a-z0-9-]{0,29}$/\n\nconst getValidityOf = (name: string): Validity => {\n  if (ASERTO_NAME_REGEXP.test(name)) {\n    return 'VALID'\n  } else if (name.length === 0 || ASERTO_NAME_FRAGMENT_REGEXP.test(name)) {\n    return 'VALID_FRAGMENT'\n  }\n  return 'INVALID'\n}\n\nconst isValid = (name: string) => getValidityOf(name) === 'VALID'\n\nconst AsertoNameValidator: Validator<string> = {\n  getValidityOf,\n  isValid,\n  ruleText: 'Start with a letter. Must be 4 to 30 lowercase alphanumeric characters or dashes.',\n}\n\nexport default AsertoNameValidator\n","import styled from 'styled-components'\n\nexport const ContentContainer = styled.div`\n  padding: 20px;\n  width: 100%;\n`\n\nexport const FormContainer = styled.div`\n  margin-top: 18px;\n`\n\nexport const FieldContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: 12px auto;\n`\n\nexport const ButtonsContainer = styled.div`\n  width: 100%;\n  flex: 1 1 0%;\n  justify-content: flex-end;\n  align-items: flex-end;\n  float: right;\n  display: flex;\n  margin-top: 20px;\n  button:first-of-type {\n    margin-right: 10px;\n  }\n`\n","import React, { useState } from 'react'\nimport { Button, CardModal, useShowError, ValidatedInput } from '@aserto/console-common'\n\nimport { AuthorizerInstance } from '../../../../common/types'\nimport { useAddAuthorizerInstance } from '../../../api/internal'\nimport useIsAuthorizerNameAvailable from '../../../lib/availability/UseIsAuthorizerInstanceNameAvailable'\nimport AsertoNameValidator from '../../../lib/validation/AsertoNameValidator'\nimport { ButtonsContainer, ContentContainer, FieldContainer, FormContainer } from './styles'\n\nexport type AuthorizerModalProps = {\n  authorizerInstance?: AuthorizerInstance\n  show: boolean\n  onSuccess?: () => void\n  onHide: () => void\n}\n\nconst AuthorizerModal: React.FC<AuthorizerModalProps> = ({ authorizerInstance, show, onHide }) => {\n  const [instanceName, setInstanceName] = useState('')\n  const [instanceUrl, setInstanceUrl] = useState('')\n  const [apiKey, setApiKey] = useState('')\n  const clearModalState = () => {\n    setInstanceName('')\n    setInstanceUrl('')\n    setApiKey('')\n  }\n  const showError = useShowError()\n\n  const { mutate: addAuthorizerInstace } = useAddAuthorizerInstance({\n    onError: (e) => {\n      showError(e)\n    },\n  })\n\n  return (\n    <>\n      <CardModal\n        cardHeight=\"100%\"\n        show={show}\n        title=\"Connect an authorizer\"\n        onHide={() => {\n          clearModalState()\n          onHide()\n        }}\n      >\n        <ContentContainer className=\"add-a-authorizer-modal-content\">\n          <div>Provide a unique name and click the Add button.</div>\n          <FormContainer>\n            <FieldContainer>\n              <ValidatedInput\n                autoFocus\n                defaultValue={authorizerInstance?.name}\n                disabled={!!authorizerInstance?.name}\n                label=\"Instance Name\"\n                useIsAvailable={useIsAuthorizerNameAvailable()}\n                validator={AsertoNameValidator}\n                value={authorizerInstance?.name}\n                onChange={(v) => setInstanceName(v || '')}\n              />\n            </FieldContainer>\n            <FieldContainer>\n              <ValidatedInput\n                label=\"Instance URL\"\n                value={authorizerInstance?.url}\n                onChange={(v) => setInstanceUrl(v || '')}\n              />\n            </FieldContainer>\n            <FieldContainer>\n              <ValidatedInput\n                label=\"API Key (Optional)\"\n                type=\"password\"\n                value={authorizerInstance?.apiKey}\n                onChange={(v) => setApiKey(v || '')}\n              />\n            </FieldContainer>\n          </FormContainer>\n          <ButtonsContainer>\n            <Button\n              data-testid=\"cancel-btn\"\n              variant=\"secondary\"\n              onClick={() => {\n                clearModalState()\n                onHide()\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              data-testid=\"add-authorizer-modal-btn\"\n              disabled={instanceName === '' || instanceUrl === ''}\n              id=\"add-authorizer\"\n              type=\"submit\"\n              onClick={() => {\n                onHide()\n                addAuthorizerInstace({ name: instanceName, url: instanceUrl, apiKey: apiKey })\n              }}\n            >\n              Save\n            </Button>\n          </ButtonsContainer>\n        </ContentContainer>\n      </CardModal>\n    </>\n  )\n}\n\nexport default AuthorizerModal\n","import styled from 'styled-components'\n\nexport const ContentContainer = styled.div`\n  padding: 20px;\n  width: 100%;\n  height: fit-content;\n`\nexport const TextArea = styled.div`\n  font-size: 16px;\n`\nexport const Text = styled.div<{ bold?: boolean }>`\n  display: flex;\n  font-weight: ${({ bold }) => (bold ? 'bold' : 500)};\n`\n\nexport const InputContainer = styled.div`\n  input {\n    width: 600px;\n  }\n`\n\nexport const ButtonsContainer = styled.div`\n  width: 100%;\n  flex: 1 1 0%;\n  justify-content: flex-start;\n  align-items: flex-start;\n  float: right;\n  display: flex;\n  margin-top: 60px;\n  button:first-of-type {\n    margin-right: 10px;\n  }\n`\n","import React from 'react'\nimport { Button, CardModal } from '@aserto/console-common'\n\nimport { ButtonsContainer, ContentContainer, TextArea } from './styles'\n\nexport type DeleteConfirmationModalProps = {\n  redirectUrl: string\n  show: boolean\n  onHide: () => void\n  subject: string\n  onClickRemove: () => void\n}\n\nconst DeleteConfirmationModal: React.FC<DeleteConfirmationModalProps> = ({\n  onHide,\n  show,\n  subject,\n  onClickRemove,\n}) => {\n  const onClickHideButton = onHide\n\n  return (\n    <>\n      <CardModal\n        cardHeight=\"100%\"\n        show={show}\n        title={`Delete ${subject}`}\n        variant=\"delete_danger\"\n        onHide={onClickHideButton}\n      >\n        <ContentContainer>\n          <TextArea>Are you sure you want to delete your {subject}?</TextArea>\n          <ButtonsContainer>\n            <Button variant=\"secondary\" onClick={onClickHideButton}>\n              Cancel\n            </Button>\n            <Button data-testid=\"delete-subject\" variant=\"danger\" onClick={onClickRemove}>\n              Delete\n            </Button>\n          </ButtonsContainer>\n        </ContentContainer>\n      </CardModal>\n    </>\n  )\n}\n\nexport default DeleteConfirmationModal\n","import styled from 'styled-components'\n\nexport const Text = styled.div<{ bold?: boolean; color?: string; size?: string }>`\n  font-weight: ${({ bold }) => (bold ? 'bold' : 100)};\n  font-size: ${({ size }) => size};\n  color: ${({ color }) => color};\n  padding-top: 8px;\n`\n\nexport const ActionsContainer = styled.div`\n  padding-left: 90px;\n  display: block;\n`\n\nexport const ButtonsContainer = styled.div`\n  font-family: Roboto;\n  width: 130px;\n  padding-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n`\n","import React from 'react'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Button, SpinnerToggle, useShowError } from '@aserto/console-common'\n\nimport { AuthorizerInstance } from '../../../../common/types'\nimport { useRemoveAuthorizerInstance } from '../../../api/internal'\nimport DeleteConfirmationModal from '../../DeleteConfirmationModal'\nimport AuthorizerModal from '../AuthorizerModal'\nimport { ActionsContainer, ButtonsContainer } from './styles'\n\nexport type ManageAuthorizerProps = {\n  authorizerInstance: AuthorizerInstance\n}\n\nexport const ManageAuthorizer: React.FC<ManageAuthorizerProps> = ({ authorizerInstance }) => {\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [showEditAuthorizerModal, setShowEditAuthorizerModal] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const showError = useShowError()\n  const navigate = useNavigate()\n  const { mutateAsync: removeInstance } = useRemoveAuthorizerInstance({\n    onSuccess: () => {\n      navigate('/ui/authorizers')\n    },\n    onError: (error) => {\n      setIsLoading(false)\n      showError(error)\n    },\n    onMutate: () => setIsLoading(true),\n  })\n\n  const onClickRemoveAuthorizer = (instanceName: string) => {\n    removeInstance(instanceName)\n  }\n\n  const onClickShowDeleteModal = () => {\n    setShowDeleteModal(true)\n  }\n\n  const onClickEditAuthorizer = () => {\n    setShowEditAuthorizerModal(true)\n  }\n\n  return (\n    <>\n      <SpinnerToggle show={isLoading} />\n      <AuthorizerModal\n        authorizerInstance={authorizerInstance}\n        show={showEditAuthorizerModal}\n        onHide={() => setShowEditAuthorizerModal(false)}\n      />\n      <DeleteConfirmationModal\n        redirectUrl=\"/\"\n        show={showDeleteModal}\n        subject=\"Authorizer\"\n        onClickRemove={() => onClickRemoveAuthorizer(authorizerInstance.name)}\n        onHide={() => setShowDeleteModal(false)}\n      />\n      <ActionsContainer>\n        <ButtonsContainer>\n          <Button\n            data-testid=\"add-authorizer-btn\"\n            id=\"add-a-authorizer\"\n            onClick={onClickEditAuthorizer}\n          >\n            Edit\n          </Button>\n          <Button\n            data-testid=\"delete-authorizer\"\n            disabled={!authorizerInstance || showDeleteModal}\n            variant=\"danger\"\n            onClick={onClickShowDeleteModal}\n          >\n            Delete\n          </Button>\n        </ButtonsContainer>\n      </ActionsContainer>\n    </>\n  )\n}\n","import styled from 'styled-components'\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin: 1rem 6rem;\n  input {\n    width: 700px;\n  }\n  label {\n    font-size: 14px;\n  }\n`\n","import copy from 'copy-to-clipboard'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ActionableInput } from '@aserto/console-common'\n\nimport { useAuthorizerInstances } from '../../../../api/internal'\nimport { ManageAuthorizer } from '../../../../components/authorizers/ManageAuthorizer'\nimport { useConfig } from '../../../../services/ConfigProvider'\nimport Frame from '../../Frame'\nimport { InputContainer } from './styles'\n\nconst Settings: React.FC = () => {\n  const { id: authorizerInstance } = useParams()\n  const { asertoDirectoryUrl, directoryApiKey, directoryTenantId } = useConfig()\n  const [authorizerServiceUrl, setAuthorizerServiceUrl] = useState('')\n  const [authorizerApiKey, setAuthorizerApiKey] = useState('')\n\n  const { data } = useAuthorizerInstances()\n\n  const authorizerInstances = useMemo(() => {\n    return data?.results || []\n  }, [data?.results])\n\n  const activeInstance = useMemo(() => {\n    return authorizerInstances?.find((e) => e.name === authorizerInstance)\n  }, [authorizerInstances, authorizerInstance])\n\n  useEffect(() => {\n    setAuthorizerApiKey(activeInstance?.apiKey || '')\n    setAuthorizerServiceUrl(activeInstance?.url || '')\n  }, [activeInstance])\n\n  return (\n    <Frame>\n      <div>\n        <InputContainer>\n          <ActionableInput\n            defaultValue={authorizerInstance}\n            disabled\n            label=\"Authorizer Instance Name\"\n            readOnly={true}\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        <InputContainer>\n          <ActionableInput\n            disabled\n            label=\"Authorizer Service URL\"\n            readOnly={true}\n            value={authorizerServiceUrl}\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        <InputContainer hidden={!authorizerApiKey}>\n          <ActionableInput\n            disabled\n            label=\"Authorizer API key\"\n            placeholder=\"****************************************************************\"\n            readOnly={true}\n            shouldShowHideShowButton\n            type=\"password\"\n            value={authorizerApiKey}\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        <InputContainer>\n          <ActionableInput\n            defaultValue={asertoDirectoryUrl}\n            disabled\n            label=\"Directory Service URL\"\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        {directoryApiKey && directoryApiKey !== '' && (\n          <InputContainer>\n            <ActionableInput\n              defaultValue={directoryApiKey}\n              disabled\n              label=\"Directory API key\"\n              placeholder=\"****************************************************************\"\n              shouldShowHideShowButton\n              type=\"password\"\n              onClickCopy={copy}\n            />\n          </InputContainer>\n        )}\n        {directoryTenantId && directoryTenantId !== '' && (\n          <InputContainer>\n            <ActionableInput\n              defaultValue={directoryTenantId}\n              disabled\n              label=\"Directory Tenant ID\"\n              onClickCopy={copy}\n            />\n          </InputContainer>\n        )}\n\n        <ManageAuthorizer\n          authorizerInstance={{\n            apiKey: authorizerApiKey,\n            name: authorizerInstance!,\n            url: authorizerServiceUrl!,\n          }}\n        ></ManageAuthorizer>\n      </div>\n    </Frame>\n  )\n}\n\nexport default Settings\n"],"names":["useAuthorizerInstances","options","get","useInternalClient","useQuery","QueryKeys","AuthorizerInstances","path","_objectSpread","enabled","retry","staleTime","Infinity","useAddAuthorizerInstance","reactQueryHooks","arguments","length","undefined","mutationOptions","useMutationOptions","post","queryClient","useQueryClient","useMutation","MutationKeys","AddAuthorizerInstance","body","onSuccess","data","context","_mutationOptions$onSu","invalidateQueries","removeQueries","IsAuthorizerInstanceNameAvailable","name","call","useRemoveAuthorizerInstance","mutationHooks","PoliciesData","del","concat","_mutationOptions$onSu2","useIsAuthorizerInstanceNameAvailable","instanceName","useMemo","useIsAuthorizerNameAvailableInternal","defaultName","queryResult","_queryResult$data","_queryResult$data2","_queryResult$data3","isAvailable","availability","reason","getAvailabilityReasonForConsole","key","defaultkey","useIsAvailableDebounced","run","ASERTO_NAME_REGEXP","ASERTO_NAME_FRAGMENT_REGEXP","getValidityOf","test","isValid","ruleText","ContentContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormContainer","_templateObject2","FieldContainer","_templateObject3","ButtonsContainer","_templateObject4","_ref","authorizerInstance","show","onHide","_useState","useState","_useState2","_slicedToArray","setInstanceName","_useState3","_useState4","instanceUrl","setInstanceUrl","_useState5","_useState6","apiKey","setApiKey","clearModalState","showError","useShowError","addAuthorizerInstace","onError","e","mutate","_jsx","_Fragment","children","CardModal","cardHeight","title","_jsxs","className","ValidatedInput","autoFocus","defaultValue","disabled","label","useIsAvailable","useIsAuthorizerNameAvailable","validator","AsertoNameValidator","value","onChange","v","url","type","Button","variant","onClick","id","TextArea","bold","_templateObject5","subject","onClickRemove","onClickHideButton","ActionsContainer","_ref2","size","_ref3","color","ManageAuthorizer","showDeleteModal","setShowDeleteModal","showEditAuthorizerModal","setShowEditAuthorizerModal","isLoading","setIsLoading","navigate","useNavigate","removeInstance","error","onMutate","mutateAsync","SpinnerToggle","AuthorizerModal","DeleteConfirmationModal","redirectUrl","InputContainer","useParams","_useConfig","useConfig","asertoDirectoryUrl","directoryApiKey","directoryTenantId","authorizerServiceUrl","setAuthorizerServiceUrl","authorizerApiKey","setAuthorizerApiKey","authorizerInstances","results","activeInstance","find","useEffect","Frame","ActionableInput","readOnly","onClickCopy","copy","hidden","placeholder","shouldShowHideShowButton"],"sourceRoot":""}
{"version":3,"file":"static/js/5871.930ba7b9.chunk.js","mappings":"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","sources":["lib/availability/UseIsAuthorizerInstanceNameAvailable.ts","lib/validation/AsertoNameValidator.ts","components/authorizers/AuthorizerModal/styles.tsx","components/authorizers/AuthorizerModal/index.tsx","components/DeleteConfirmationModal/styles.ts","components/DeleteConfirmationModal/index.tsx","components/authorizers/ManageAuthorizer/styles.tsx","components/authorizers/ManageAuthorizer/index.tsx","views/PolicyInstance/views/Settings/styles.tsx","views/PolicyInstance/views/Settings/index.tsx"],"sourcesContent":["import { useMemo } from 'react'\nimport {\n  getAvailabilityReasonForConsole,\n  useIsAvailableDebounced,\n  UseIsNameAvailable,\n} from '@aserto/console-common'\n\nimport { useIsAuthorizerInstanceNameAvailable } from '../../api/internal'\n\nconst useIsAuthorizerNameAvailable = (): UseIsNameAvailable =>\n  useMemo(() => {\n    const useIsAuthorizerNameAvailableInternal = (name: string, defaultName: string) => {\n      const queryResult = useIsAuthorizerInstanceNameAvailable(name, {\n        enabled: name !== defaultName,\n      })\n\n      const response = useMemo(() => {\n        const isAvailable =\n          !queryResult?.data?.availability ||\n          queryResult?.data?.availability === 'NAME_AVAILABILITY_AVAILABLE'\n\n        return {\n          isAvailable: isAvailable,\n          reason: getAvailabilityReasonForConsole(queryResult?.data?.reason),\n        }\n      }, [queryResult?.data])\n\n      return response\n    }\n\n    const useIsAuthorizerNameAvailableDebounced = (key: string, defaultkey: string) => {\n      const useRunTarget = () => useIsAvailableDebounced(useIsAuthorizerNameAvailableInternal)\n      const run = useMemo(useRunTarget, [])\n      return run(key, defaultkey)\n    }\n    return useIsAuthorizerNameAvailableDebounced\n  }, [])\n\nexport default useIsAuthorizerNameAvailable\n","import { Validator, Validity } from '@aserto/console-common'\n// Must start with a-z, and must be alphanumeric (or dashes) 6-30 characters\nconst ASERTO_NAME_REGEXP = /^[a-z][a-z0-9-]{3,29}$/\nconst ASERTO_NAME_FRAGMENT_REGEXP = /^[a-z][a-z0-9-]{0,29}$/\n\nconst getValidityOf = (name: string): Validity => {\n  if (ASERTO_NAME_REGEXP.test(name)) {\n    return 'VALID'\n  } else if (name.length === 0 || ASERTO_NAME_FRAGMENT_REGEXP.test(name)) {\n    return 'VALID_FRAGMENT'\n  }\n  return 'INVALID'\n}\n\nconst isValid = (name: string) => getValidityOf(name) === 'VALID'\n\nconst AsertoNameValidator: Validator<string> = {\n  getValidityOf,\n  isValid,\n  ruleText: 'Start with a letter. Must be 4 to 30 lowercase alphanumeric characters or dashes.',\n}\n\nexport default AsertoNameValidator\n","import styled from 'styled-components'\n\nexport const ContentContainer = styled.div`\n  padding: 20px;\n  width: 100%;\n`\n\nexport const FormContainer = styled.div`\n  margin-top: 18px;\n`\n\nexport const FieldContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin: 12px auto;\n`\n\nexport const ButtonsContainer = styled.div`\n  width: 100%;\n  flex: 1 1 0%;\n  justify-content: flex-end;\n  align-items: flex-end;\n  float: right;\n  display: flex;\n  margin-top: 20px;\n  button:first-of-type {\n    margin-right: 10px;\n  }\n`\n","import React, { useState } from 'react'\nimport { Button, CardModal, useShowError, ValidatedInput } from '@aserto/console-common'\n\nimport { AuthorizerInstance } from '../../../../common/types'\nimport { useAddAuthorizerInstance } from '../../../api/internal'\nimport useIsAuthorizerNameAvailable from '../../../lib/availability/UseIsAuthorizerInstanceNameAvailable'\nimport AsertoNameValidator from '../../../lib/validation/AsertoNameValidator'\nimport { ButtonsContainer, ContentContainer, FieldContainer, FormContainer } from './styles'\n\nexport type AuthorizerModalProps = {\n  authorizerInstance?: AuthorizerInstance\n  show: boolean\n  onSuccess?: () => void\n  onHide: () => void\n}\n\nconst AuthorizerModal: React.FC<AuthorizerModalProps> = ({ authorizerInstance, show, onHide }) => {\n  const [instanceName, setInstanceName] = useState('')\n  const [instanceUrl, setInstanceUrl] = useState('')\n  const [apiKey, setApiKey] = useState('')\n  const clearModalState = () => {\n    setInstanceName('')\n    setInstanceUrl('')\n    setApiKey('')\n  }\n  const showError = useShowError()\n\n  const { mutate: addAuthorizerInstace } = useAddAuthorizerInstance({\n    onError: (e) => {\n      showError(e)\n    },\n  })\n\n  return (\n    <>\n      <CardModal\n        cardHeight=\"100%\"\n        show={show}\n        title=\"Connect an authorizer\"\n        onHide={() => {\n          clearModalState()\n          onHide()\n        }}\n      >\n        <ContentContainer className=\"add-a-authorizer-modal-content\">\n          <div>Provide a unique name and click the Add button.</div>\n          <FormContainer>\n            <FieldContainer>\n              <ValidatedInput\n                autoFocus\n                defaultValue={authorizerInstance?.name}\n                disabled={!!authorizerInstance?.name}\n                label=\"Instance Name\"\n                useIsAvailable={useIsAuthorizerNameAvailable()}\n                validator={AsertoNameValidator}\n                value={authorizerInstance?.name}\n                onChange={(v) => setInstanceName(v || '')}\n              />\n            </FieldContainer>\n            <FieldContainer>\n              <ValidatedInput\n                label=\"Instance URL\"\n                value={authorizerInstance?.url}\n                onChange={(v) => setInstanceUrl(v || '')}\n              />\n            </FieldContainer>\n            <FieldContainer>\n              <ValidatedInput\n                label=\"API Key (Optional)\"\n                type=\"password\"\n                value={authorizerInstance?.apiKey}\n                onChange={(v) => setApiKey(v || '')}\n              />\n            </FieldContainer>\n          </FormContainer>\n          <ButtonsContainer>\n            <Button\n              data-testid=\"cancel-btn\"\n              variant=\"secondary\"\n              onClick={() => {\n                clearModalState()\n                onHide()\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              data-testid=\"add-authorizer-modal-btn\"\n              disabled={instanceName === '' || instanceUrl === ''}\n              id=\"add-authorizer\"\n              type=\"submit\"\n              onClick={() => {\n                onHide()\n                addAuthorizerInstace({ name: instanceName, url: instanceUrl, apiKey: apiKey })\n              }}\n            >\n              Save\n            </Button>\n          </ButtonsContainer>\n        </ContentContainer>\n      </CardModal>\n    </>\n  )\n}\n\nexport default AuthorizerModal\n","import styled from 'styled-components'\n\nexport const ContentContainer = styled.div`\n  padding: 20px;\n  width: 100%;\n  height: fit-content;\n`\nexport const TextArea = styled.div`\n  font-size: 16px;\n`\nexport const Text = styled.div<{ bold?: boolean }>`\n  display: flex;\n  font-weight: ${({ bold }) => (bold ? 'bold' : 500)};\n`\n\nexport const InputContainer = styled.div`\n  input {\n    width: 600px;\n  }\n`\n\nexport const ButtonsContainer = styled.div`\n  width: 100%;\n  flex: 1 1 0%;\n  justify-content: flex-start;\n  align-items: flex-start;\n  float: right;\n  display: flex;\n  margin-top: 60px;\n  button:first-of-type {\n    margin-right: 10px;\n  }\n`\n","import React from 'react'\nimport { Button, CardModal } from '@aserto/console-common'\n\nimport { ButtonsContainer, ContentContainer, TextArea } from './styles'\n\nexport type DeleteConfirmationModalProps = {\n  redirectUrl: string\n  show: boolean\n  onHide: () => void\n  subject: string\n  onClickRemove: () => void\n}\n\nconst DeleteConfirmationModal: React.FC<DeleteConfirmationModalProps> = ({\n  onHide,\n  show,\n  subject,\n  onClickRemove,\n}) => {\n  const onClickHideButton = onHide\n\n  return (\n    <>\n      <CardModal\n        cardHeight=\"100%\"\n        show={show}\n        title={`Delete ${subject}`}\n        variant=\"delete_danger\"\n        onHide={onClickHideButton}\n      >\n        <ContentContainer>\n          <TextArea>Are you sure you want to delete your {subject}?</TextArea>\n          <ButtonsContainer>\n            <Button variant=\"secondary\" onClick={onClickHideButton}>\n              Cancel\n            </Button>\n            <Button data-testid=\"delete-subject\" variant=\"danger\" onClick={onClickRemove}>\n              Delete\n            </Button>\n          </ButtonsContainer>\n        </ContentContainer>\n      </CardModal>\n    </>\n  )\n}\n\nexport default DeleteConfirmationModal\n","import styled from 'styled-components'\n\nexport const Text = styled.div<{ bold?: boolean; color?: string; size?: string }>`\n  font-weight: ${({ bold }) => (bold ? 'bold' : 100)};\n  font-size: ${({ size }) => size};\n  color: ${({ color }) => color};\n  padding-top: 8px;\n`\n\nexport const ActionsContainer = styled.div`\n  padding-left: 90px;\n  display: block;\n`\n\nexport const ButtonsContainer = styled.div`\n  font-family: Roboto;\n  width: 130px;\n  padding-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n`\n","import React from 'react'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Button, SpinnerToggle, useShowError } from '@aserto/console-common'\n\nimport { AuthorizerInstance } from '../../../../common/types'\nimport { useRemoveAuthorizerInstance } from '../../../api/internal'\nimport DeleteConfirmationModal from '../../DeleteConfirmationModal'\nimport AuthorizerModal from '../AuthorizerModal'\nimport { ActionsContainer, ButtonsContainer } from './styles'\n\nexport type ManageAuthorizerProps = {\n  authorizerInstance: AuthorizerInstance\n}\n\nexport const ManageAuthorizer: React.FC<ManageAuthorizerProps> = ({ authorizerInstance }) => {\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const [showEditAuthorizerModal, setShowEditAuthorizerModal] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const showError = useShowError()\n  const navigate = useNavigate()\n  const { mutateAsync: removeInstance } = useRemoveAuthorizerInstance({\n    onSuccess: () => {\n      navigate('/ui/authorizers')\n    },\n    onError: (error) => {\n      setIsLoading(false)\n      showError(error)\n    },\n    onMutate: () => setIsLoading(true),\n  })\n\n  const onClickRemoveAuthorizer = (instanceName: string) => {\n    removeInstance(instanceName)\n  }\n\n  const onClickShowDeleteModal = () => {\n    setShowDeleteModal(true)\n  }\n\n  const onClickEditAuthorizer = () => {\n    setShowEditAuthorizerModal(true)\n  }\n\n  return (\n    <>\n      <SpinnerToggle show={isLoading} />\n      <AuthorizerModal\n        authorizerInstance={authorizerInstance}\n        show={showEditAuthorizerModal}\n        onHide={() => setShowEditAuthorizerModal(false)}\n      />\n      <DeleteConfirmationModal\n        redirectUrl=\"/\"\n        show={showDeleteModal}\n        subject=\"Authorizer\"\n        onClickRemove={() => onClickRemoveAuthorizer(authorizerInstance.name)}\n        onHide={() => setShowDeleteModal(false)}\n      />\n      <ActionsContainer>\n        <ButtonsContainer>\n          <Button\n            data-testid=\"add-authorizer-btn\"\n            id=\"add-a-authorizer\"\n            onClick={onClickEditAuthorizer}\n          >\n            Edit\n          </Button>\n          <Button\n            data-testid=\"delete-authorizer\"\n            disabled={!authorizerInstance || showDeleteModal}\n            variant=\"danger\"\n            onClick={onClickShowDeleteModal}\n          >\n            Delete\n          </Button>\n        </ButtonsContainer>\n      </ActionsContainer>\n    </>\n  )\n}\n","import styled from 'styled-components'\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin: 1rem 6rem;\n  input {\n    width: 700px;\n  }\n  label {\n    font-size: 14px;\n  }\n`\n","import copy from 'copy-to-clipboard'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ActionableInput } from '@aserto/console-common'\n\nimport { useAuthorizerInstances } from '../../../../api/internal'\nimport { ManageAuthorizer } from '../../../../components/authorizers/ManageAuthorizer'\nimport { useConfig } from '../../../../services/ConfigProvider'\nimport Frame from '../../Frame'\nimport { InputContainer } from './styles'\n\nconst Settings: React.FC = () => {\n  const { id: authorizerInstance } = useParams()\n  const { asertoDirectoryUrl, directoryApiKey, directoryTenantId } = useConfig()\n  const [authorizerServiceUrl, setAuthorizerServiceUrl] = useState('')\n  const [authorizerApiKey, setAuthorizerApiKey] = useState('')\n\n  const { data } = useAuthorizerInstances()\n\n  const authorizerInstances = useMemo(() => {\n    return data?.results || []\n  }, [data?.results])\n\n  const activeInstance = useMemo(() => {\n    return authorizerInstances?.find((e) => e.name === authorizerInstance)\n  }, [authorizerInstances, authorizerInstance])\n\n  useEffect(() => {\n    setAuthorizerApiKey(activeInstance?.apiKey || '')\n    setAuthorizerServiceUrl(activeInstance?.url || '')\n  }, [activeInstance])\n\n  return (\n    <Frame>\n      <div>\n        <InputContainer>\n          <ActionableInput\n            defaultValue={authorizerInstance}\n            disabled\n            label=\"Authorizer Instance Name\"\n            readOnly={true}\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        <InputContainer>\n          <ActionableInput\n            disabled\n            label=\"Authorizer Service URL\"\n            readOnly={true}\n            value={authorizerServiceUrl}\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        <InputContainer hidden={!authorizerApiKey}>\n          <ActionableInput\n            disabled\n            label=\"Authorizer API key\"\n            placeholder=\"****************************************************************\"\n            readOnly={true}\n            shouldShowHideShowButton\n            type=\"password\"\n            value={authorizerApiKey}\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        <InputContainer>\n          <ActionableInput\n            defaultValue={asertoDirectoryUrl}\n            disabled\n            label=\"Directory Service URL\"\n            onClickCopy={copy}\n          />\n        </InputContainer>\n        {directoryApiKey && directoryApiKey !== '' && (\n          <InputContainer>\n            <ActionableInput\n              defaultValue={directoryApiKey}\n              disabled\n              label=\"Directory API key\"\n              placeholder=\"****************************************************************\"\n              shouldShowHideShowButton\n              type=\"password\"\n              onClickCopy={copy}\n            />\n          </InputContainer>\n        )}\n        {directoryTenantId && directoryTenantId !== '' && (\n          <InputContainer>\n            <ActionableInput\n              defaultValue={directoryTenantId}\n              disabled\n              label=\"Directory Tenant ID\"\n              onClickCopy={copy}\n            />\n          </InputContainer>\n        )}\n\n        <ManageAuthorizer\n          authorizerInstance={{\n            apiKey: authorizerApiKey,\n            name: authorizerInstance!,\n            url: authorizerServiceUrl!,\n          }}\n        ></ManageAuthorizer>\n      </div>\n    </Frame>\n  )\n}\n\nexport default Settings\n"],"names":["useMemo","useIsAuthorizerNameAvailableInternal","name","defaultName","queryResult","useIsAuthorizerInstanceNameAvailable","enabled","_queryResult$data","_queryResult$data2","_queryResult$data3","isAvailable","data","availability","reason","getAvailabilityReasonForConsole","key","defaultkey","useIsAvailableDebounced","run","ASERTO_NAME_REGEXP","ASERTO_NAME_FRAGMENT_REGEXP","getValidityOf","test","length","isValid","ruleText","ContentContainer","styled","div","_templateObject","_taggedTemplateLiteral","FormContainer","_templateObject2","FieldContainer","_templateObject3","ButtonsContainer","_templateObject4","_ref","authorizerInstance","show","onHide","_useState","useState","_useState2","_slicedToArray","instanceName","setInstanceName","_useState3","_useState4","instanceUrl","setInstanceUrl","_useState5","_useState6","apiKey","setApiKey","clearModalState","showError","useShowError","addAuthorizerInstace","useAddAuthorizerInstance","onError","e","mutate","_jsx","_Fragment","children","CardModal","cardHeight","title","_jsxs","className","ValidatedInput","autoFocus","defaultValue","disabled","label","useIsAvailable","useIsAuthorizerNameAvailable","validator","AsertoNameValidator","value","onChange","v","url","type","Button","variant","onClick","id","TextArea","bold","_templateObject5","subject","onClickRemove","onClickHideButton","concat","ActionsContainer","_ref2","size","_ref3","color","ManageAuthorizer","showDeleteModal","setShowDeleteModal","showEditAuthorizerModal","setShowEditAuthorizerModal","isLoading","setIsLoading","navigate","useNavigate","removeInstance","useRemoveAuthorizerInstance","onSuccess","error","onMutate","mutateAsync","SpinnerToggle","AuthorizerModal","DeleteConfirmationModal","redirectUrl","InputContainer","useParams","_useConfig","useConfig","asertoDirectoryUrl","directoryApiKey","directoryTenantId","authorizerServiceUrl","setAuthorizerServiceUrl","authorizerApiKey","setAuthorizerApiKey","useAuthorizerInstances","authorizerInstances","results","activeInstance","find","useEffect","Frame","ActionableInput","readOnly","onClickCopy","copy","hidden","placeholder","shouldShowHideShowButton"],"sourceRoot":""}
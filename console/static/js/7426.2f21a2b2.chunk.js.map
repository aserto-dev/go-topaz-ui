{"version":3,"file":"static/js/7426.2f21a2b2.chunk.js","mappings":"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","sources":["../node_modules/@aserto/console-common/dist/index-5baf21d1.js"],"sourcesContent":["/** @private */\nfunction extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nfunction isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n/** @private */\nfunction areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        // must be at least one error\n        obj.length > 0 &&\n        // error has at least a message\n        obj.every((ob) => 'message' in ob));\n}\n/**\n * Limits the WebSocket close event reason to not exceed a length of one frame.\n * Reference: https://datatracker.ietf.org/doc/html/rfc6455#section-5.2.\n *\n * @private\n */\nfunction limitCloseReason(reason, whenTooLong) {\n    return reason.length < 124 ? reason : whenTooLong;\n}\n\n/**\n *\n * common\n *\n */\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nconst GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nvar CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n    /** Tried subscribing before connect ack */\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n    /** Subscriber distinction is very important */\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Pong\"] = \"pong\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Next\"] = \"next\";\n    MessageType[\"Error\"] = \"error\";\n    MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\nfunction validateMessage(val) {\n    if (!isObject(val)) {\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n    }\n    if (!val.type) {\n        throw new Error(`Message is missing the 'type' property`);\n    }\n    if (typeof val.type !== 'string') {\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n    }\n    switch (val.type) {\n        case MessageType.ConnectionInit:\n        case MessageType.ConnectionAck:\n        case MessageType.Ping:\n        case MessageType.Pong: {\n            if (val.payload != null && !isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`);\n            }\n            break;\n        }\n        case MessageType.Subscribe: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            if (typeof val.payload.query !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n            }\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n            }\n            if (val.payload.operationName != null &&\n                extendedTypeof(val.payload.operationName) !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n            }\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n            }\n            break;\n        }\n        case MessageType.Next: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Error: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!areGraphQLErrors(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Complete: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            break;\n        }\n        default:\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n    }\n    return val;\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\nfunction parseMessage(data, reviver) {\n    return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\nfunction stringifyMessage(msg, replacer) {\n    validateMessage(msg);\n    return JSON.stringify(msg, replacer);\n}\n\n/**\n *\n * client\n *\n */\nvar __await = (undefined && undefined.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); };\nvar __asyncGenerator = (undefined && undefined.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\n/**\n * Creates a disposable GraphQL over WebSocket client.\n *\n * @category Client\n */\nfunction createClient(options) {\n    const { url, connectionParams, lazy = true, onNonLazyError = console.error, lazyCloseTimeout: lazyCloseTimeoutMs = 0, keepAlive = 0, disablePong, connectionAckWaitTimeout = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {\n        let retryDelay = 1000; // start with 1s delay\n        for (let i = 0; i < retries; i++) {\n            retryDelay *= 2;\n        }\n        await new Promise((resolve) => setTimeout(resolve, retryDelay +\n            // add random timeout from 300ms to 3s\n            Math.floor(Math.random() * (3000 - 300) + 300)));\n    }, shouldRetry = isLikeCloseEvent, isFatalConnectionProblem, on, webSocketImpl, \n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, jsonMessageReplacer: replacer, jsonMessageReviver: reviver, } = options;\n    let ws;\n    if (webSocketImpl) {\n        if (!isWebSocket(webSocketImpl)) {\n            throw new Error('Invalid WebSocket implementation provided');\n        }\n        ws = webSocketImpl;\n    }\n    else if (typeof WebSocket !== 'undefined') {\n        ws = WebSocket;\n    }\n    else if (typeof global !== 'undefined') {\n        ws =\n            global.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                global.MozWebSocket;\n    }\n    else if (typeof window !== 'undefined') {\n        ws =\n            window.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                window.MozWebSocket;\n    }\n    if (!ws)\n        throw new Error(\"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\");\n    const WebSocketImpl = ws;\n    // websocket status emitter, subscriptions are handled differently\n    const emitter = (() => {\n        const message = (() => {\n            const listeners = {};\n            return {\n                on(id, listener) {\n                    listeners[id] = listener;\n                    return () => {\n                        delete listeners[id];\n                    };\n                },\n                emit(message) {\n                    var _a;\n                    if ('id' in message)\n                        (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);\n                },\n            };\n        })();\n        const listeners = {\n            connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],\n            opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],\n            connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],\n            ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],\n            pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],\n            message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],\n            closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],\n            error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : [],\n        };\n        return {\n            onMessage: message.on,\n            on(event, listener) {\n                const l = listeners[event];\n                l.push(listener);\n                return () => {\n                    l.splice(l.indexOf(listener), 1);\n                };\n            },\n            emit(event, ...args) {\n                // we copy the listeners so that unlistens dont \"pull the rug under our feet\"\n                for (const listener of [...listeners[event]]) {\n                    // @ts-expect-error: The args should fit\n                    listener(...args);\n                }\n            },\n        };\n    })();\n    // invokes the callback either when an error or closed event is emitted,\n    // first one that gets called prevails, other emissions are ignored\n    function errorOrClosed(cb) {\n        const listening = [\n            // errors are fatal and more critical than close events, throw them first\n            emitter.on('error', (err) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(err);\n            }),\n            // closes can be graceful and not fatal, throw them second (if error didnt throw)\n            emitter.on('closed', (event) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(event);\n            }),\n        ];\n    }\n    let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n    async function connect() {\n        // clear the lazy close timeout immediatelly so that close gets debounced\n        // see: https://github.com/enisdenjo/graphql-ws/issues/388\n        clearTimeout(lazyCloseTimeout);\n        const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : (connecting = new Promise((connected, denied) => (async () => {\n            if (retrying) {\n                await retryWait(retries);\n                // subscriptions might complete while waiting for retry\n                if (!locks) {\n                    connecting = undefined;\n                    return denied({ code: 1000, reason: 'All Subscriptions Gone' });\n                }\n                retries++;\n            }\n            emitter.emit('connecting', retrying);\n            const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);\n            let connectionAckTimeout, queuedPing;\n            function enqueuePing() {\n                if (isFinite(keepAlive) && keepAlive > 0) {\n                    clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)\n                    queuedPing = setTimeout(() => {\n                        if (socket.readyState === WebSocketImpl.OPEN) {\n                            socket.send(stringifyMessage({ type: MessageType.Ping }));\n                            emitter.emit('ping', false, undefined);\n                        }\n                    }, keepAlive);\n                }\n            }\n            errorOrClosed((errOrEvent) => {\n                connecting = undefined;\n                clearTimeout(connectionAckTimeout);\n                clearTimeout(queuedPing);\n                denied(errOrEvent);\n                if (errOrEvent instanceof TerminatedCloseEvent) {\n                    socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below\n                    socket.onerror = null;\n                    socket.onclose = null;\n                }\n            });\n            socket.onerror = (err) => emitter.emit('error', err);\n            socket.onclose = (event) => emitter.emit('closed', event);\n            socket.onopen = async () => {\n                try {\n                    emitter.emit('opened', socket);\n                    const payload = typeof connectionParams === 'function'\n                        ? await connectionParams()\n                        : connectionParams;\n                    // connectionParams might take too long causing the server to kick off the client\n                    // the necessary error/close event is already reported - simply stop execution\n                    if (socket.readyState !== WebSocketImpl.OPEN)\n                        return;\n                    socket.send(stringifyMessage(payload\n                        ? {\n                            type: MessageType.ConnectionInit,\n                            payload,\n                        }\n                        : {\n                            type: MessageType.ConnectionInit,\n                            // payload is completely absent if not provided\n                        }, replacer));\n                    if (isFinite(connectionAckWaitTimeout) &&\n                        connectionAckWaitTimeout > 0) {\n                        connectionAckTimeout = setTimeout(() => {\n                            socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');\n                        }, connectionAckWaitTimeout);\n                    }\n                    enqueuePing(); // enqueue ping (noop if disabled)\n                }\n                catch (err) {\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));\n                }\n            };\n            let acknowledged = false;\n            socket.onmessage = ({ data }) => {\n                try {\n                    const message = parseMessage(data, reviver);\n                    emitter.emit('message', message);\n                    if (message.type === 'ping' || message.type === 'pong') {\n                        emitter.emit(message.type, true, message.payload); // received\n                        if (message.type === 'pong') {\n                            enqueuePing(); // enqueue next ping (noop if disabled)\n                        }\n                        else if (!disablePong) {\n                            // respond with pong on ping\n                            socket.send(stringifyMessage(message.payload\n                                ? {\n                                    type: MessageType.Pong,\n                                    payload: message.payload,\n                                }\n                                : {\n                                    type: MessageType.Pong,\n                                    // payload is completely absent if not provided\n                                }));\n                            emitter.emit('pong', false, message.payload);\n                        }\n                        return; // ping and pongs can be received whenever\n                    }\n                    if (acknowledged)\n                        return; // already connected and acknowledged\n                    if (message.type !== MessageType.ConnectionAck)\n                        throw new Error(`First message cannot be of type ${message.type}`);\n                    clearTimeout(connectionAckTimeout);\n                    acknowledged = true;\n                    emitter.emit('connected', socket, message.payload, retrying); // connected = socket opened + acknowledged\n                    retrying = false; // future lazy connects are not retries\n                    retries = 0; // reset the retries on connect\n                    connected([\n                        socket,\n                        new Promise((_, reject) => errorOrClosed(reject)),\n                    ]);\n                }\n                catch (err) {\n                    socket.onmessage = null; // stop reading messages as soon as reading breaks once\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));\n                }\n            };\n        })())));\n        // if the provided socket is in a closing state, wait for the throw on close\n        if (socket.readyState === WebSocketImpl.CLOSING)\n            await throwOnClose;\n        let release = () => {\n            // releases this connection\n        };\n        const released = new Promise((resolve) => (release = resolve));\n        return [\n            socket,\n            release,\n            Promise.race([\n                // wait for\n                released.then(() => {\n                    if (!locks) {\n                        // and if no more locks are present, complete the connection\n                        const complete = () => socket.close(1000, 'Normal Closure');\n                        if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n                            // if the keepalive is set, allow for the specified calmdown time and\n                            // then complete if the socket is still open.\n                            lazyCloseTimeout = setTimeout(() => {\n                                if (socket.readyState === WebSocketImpl.OPEN)\n                                    complete();\n                            }, lazyCloseTimeoutMs);\n                        }\n                        else {\n                            // otherwise complete immediately\n                            complete();\n                        }\n                    }\n                }),\n                // or\n                throwOnClose,\n            ]),\n        ];\n    }\n    /**\n     * Checks the `connect` problem and evaluates if the client should retry.\n     */\n    function shouldRetryConnectOrThrow(errOrCloseEvent) {\n        // some close codes are worth reporting immediately\n        if (isLikeCloseEvent(errOrCloseEvent) &&\n            (isFatalInternalCloseCode(errOrCloseEvent.code) ||\n                [\n                    CloseCode.InternalServerError,\n                    CloseCode.InternalClientError,\n                    CloseCode.BadRequest,\n                    CloseCode.BadResponse,\n                    CloseCode.Unauthorized,\n                    // CloseCode.Forbidden, might grant access out after retry\n                    CloseCode.SubprotocolNotAcceptable,\n                    // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n                    // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n                    CloseCode.SubscriberAlreadyExists,\n                    CloseCode.TooManyInitialisationRequests,\n                    // 4499, // Terminated, probably because the socket froze, we want to retry\n                ].includes(errOrCloseEvent.code)))\n            throw errOrCloseEvent;\n        // client was disposed, no retries should proceed regardless\n        if (disposed)\n            return false;\n        // normal closure (possibly all subscriptions have completed)\n        // if no locks were acquired in the meantime, shouldnt try again\n        if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000)\n            return locks > 0;\n        // retries are not allowed or we tried to many times, report error\n        if (!retryAttempts || retries >= retryAttempts)\n            throw errOrCloseEvent;\n        // throw non-retryable connection problems\n        if (!shouldRetry(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // @deprecated throw fatal connection problems immediately\n        if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // looks good, start retrying\n        return (retrying = true);\n    }\n    // in non-lazy (hot?) mode always hold one connection lock to persist the socket\n    if (!lazy) {\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [, , throwOnClose] = await connect();\n                    await throwOnClose; // will always throw because releaser is not used\n                }\n                catch (errOrCloseEvent) {\n                    try {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                    catch (errOrCloseEvent) {\n                        // report thrown error, no further retries\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);\n                    }\n                }\n            }\n        })();\n    }\n    function subscribe(payload, sink) {\n        const id = generateID(payload);\n        let done = false, errored = false, releaser = () => {\n            // for handling completions before connect\n            locks--;\n            done = true;\n        };\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n                    // if done while waiting for connect, release the connection lock right away\n                    if (done)\n                        return release();\n                    const unlisten = emitter.onMessage(id, (message) => {\n                        switch (message.type) {\n                            case MessageType.Next: {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any -- payload will fit type\n                                sink.next(message.payload);\n                                return;\n                            }\n                            case MessageType.Error: {\n                                (errored = true), (done = true);\n                                sink.error(message.payload);\n                                releaser();\n                                return;\n                            }\n                            case MessageType.Complete: {\n                                done = true;\n                                releaser(); // release completes the sink\n                                return;\n                            }\n                        }\n                    });\n                    socket.send(stringifyMessage({\n                        id,\n                        type: MessageType.Subscribe,\n                        payload,\n                    }, replacer));\n                    releaser = () => {\n                        if (!done && socket.readyState === WebSocketImpl.OPEN)\n                            // if not completed already and socket is open, send complete message to server on release\n                            socket.send(stringifyMessage({\n                                id,\n                                type: MessageType.Complete,\n                            }, replacer));\n                        locks--;\n                        done = true;\n                        release();\n                    };\n                    // either the releaser will be called, connection completed and\n                    // the promise resolved or the socket closed and the promise rejected.\n                    // whatever happens though, we want to stop listening for messages\n                    await waitForReleaseOrThrowOnClose.finally(unlisten);\n                    return; // completed, shouldnt try again\n                }\n                catch (errOrCloseEvent) {\n                    if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                        return;\n                }\n            }\n        })()\n            .then(() => {\n            // delivering either an error or a complete terminates the sequence\n            if (!errored)\n                sink.complete();\n        }) // resolves on release or normal closure\n            .catch((err) => {\n            sink.error(err);\n        }); // rejects on close events and errors\n        return () => {\n            // dispose only of active subscriptions\n            if (!done)\n                releaser();\n        };\n    }\n    return {\n        on: emitter.on,\n        subscribe,\n        iterate(request) {\n            const pending = [];\n            const deferred = {\n                done: false,\n                error: null,\n                resolve: () => {\n                    // noop\n                },\n            };\n            const dispose = subscribe(request, {\n                next(val) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    pending.push(val);\n                    deferred.resolve();\n                },\n                error(err) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                },\n                complete() {\n                    deferred.done = true;\n                    deferred.resolve();\n                },\n            });\n            const iterator = (function iterator() {\n                return __asyncGenerator(this, arguments, function* iterator_1() {\n                    for (;;) {\n                        if (!pending.length) {\n                            // only wait if there are no pending messages available\n                            yield __await(new Promise((resolve) => (deferred.resolve = resolve)));\n                        }\n                        // first flush\n                        while (pending.length) {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            yield yield __await(pending.shift());\n                        }\n                        // then error\n                        if (deferred.error) {\n                            throw deferred.error;\n                        }\n                        // or complete\n                        if (deferred.done) {\n                            return yield __await(void 0);\n                        }\n                    }\n                });\n            })();\n            iterator.throw = async (err) => {\n                if (!deferred.done) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                }\n                return { done: true, value: undefined };\n            };\n            iterator.return = async () => {\n                dispose();\n                return { done: true, value: undefined };\n            };\n            return iterator;\n        },\n        async dispose() {\n            disposed = true;\n            if (connecting) {\n                // if there is a connection, close it\n                const [socket] = await connecting;\n                socket.close(1000, 'Normal Closure');\n            }\n        },\n        terminate() {\n            if (connecting) {\n                // only if there is a connection\n                emitter.emit('closed', new TerminatedCloseEvent());\n            }\n        },\n    };\n}\n/**\n * A syntetic close event `4499: Terminated` is issued to the current to immediately\n * close the connection without waiting for the one coming from `WebSocket.onclose`.\n *\n * Terminating is not considered fatal and a connection retry will occur as expected.\n *\n * Useful in cases where the WebSocket is stuck and not emitting any events;\n * can happen on iOS Safari, see: https://github.com/enisdenjo/graphql-ws/discussions/290.\n */\nclass TerminatedCloseEvent extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'TerminatedCloseEvent';\n        this.message = '4499: Terminated';\n        this.code = 4499;\n        this.reason = 'Terminated';\n        this.wasClean = false;\n    }\n}\nfunction isLikeCloseEvent(val) {\n    return isObject(val) && 'code' in val && 'reason' in val;\n}\nfunction isFatalInternalCloseCode(code) {\n    if ([\n        1000,\n        1001,\n        1006,\n        1005,\n        1012,\n        1013,\n        1014, // Bad Gateway\n    ].includes(code))\n        return false;\n    // all other internal errors are fatal\n    return code >= 1000 && code <= 1999;\n}\nfunction isWebSocket(val) {\n    return (typeof val === 'function' &&\n        'constructor' in val &&\n        'CLOSED' in val &&\n        'CLOSING' in val &&\n        'CONNECTING' in val &&\n        'OPEN' in val);\n}\n\nexport { CloseCode, GRAPHQL_TRANSPORT_WS_PROTOCOL, MessageType, TerminatedCloseEvent, createClient, parseMessage, stringifyMessage, validateMessage };\n"],"names":["extendedTypeof","val","Array","isArray","isObject","limitCloseReason","reason","whenTooLong","length","GRAPHQL_TRANSPORT_WS_PROTOCOL","CloseCode","MessageType","validateMessage","Error","type","ConnectionInit","ConnectionAck","Ping","Pong","payload","Subscribe","id","query","variables","operationName","extensions","Next","obj","every","ob","JSON","stringify","Complete","stringifyMessage","msg","replacer","__await","v","this","__asyncGenerator","thisArg","_arguments","generator","Symbol","asyncIterator","TypeError","i","g","apply","q","verb","n","Promise","a","b","push","resume","r","value","resolve","then","fulfill","reject","settle","e","f","shift","createClient","options","url","connectionParams","lazy","onNonLazyError","console","error","lazyCloseTimeout","lazyCloseTimeoutMs","keepAlive","disablePong","connectionAckWaitTimeout","retryAttempts","retryWait","async","retries","retryDelay","setTimeout","Math","floor","random","shouldRetry","isLikeCloseEvent","isFatalConnectionProblem","on","webSocketImpl","generateID","replace","c","toString","jsonMessageReplacer","jsonMessageReviver","reviver","ws","WebSocket","global","MozWebSocket","window","WebSocketImpl","emitter","message","listeners","listener","emit","_a","call","connecting","opened","connected","ping","pong","closed","onMessage","event","l","splice","indexOf","_len","arguments","args","_key","errorOrClosed","cb","listening","err","forEach","unlisten","locks","retrying","disposed","connect","clearTimeout","socket","throwOnClose","denied","undefined","code","connectionAckTimeout","queuedPing","enqueuePing","isFinite","readyState","OPEN","send","errOrEvent","TerminatedCloseEvent","close","onerror","onclose","onopen","ConnectionAcknowledgementTimeout","InternalClientError","acknowledged","onmessage","_ref","data","parse","parseMessage","_","BadResponse","CLOSING","release","released","race","complete","shouldRetryConnectOrThrow","errOrCloseEvent","includes","InternalServerError","BadRequest","Unauthorized","SubprotocolNotAcceptable","SubscriberAlreadyExists","TooManyInitialisationRequests","subscribe","sink","done","errored","releaser","waitForReleaseOrThrowOnClose","next","finally","catch","iterate","request","pending","deferred","dispose","iterator","throw","return","terminate","constructor","super","name","wasClean"],"sourceRoot":""}
{"version":3,"file":"static/js/1914.23f37e72.chunk.js","mappings":"wSAAaA,EAAA,WACT,SAAAA,EAAYC,EAAOC,GAAK,IAAAC,EAAA,MAAAC,EAAAA,EAAAA,GAAA,KAAAJ,GACpBK,KAAKC,iBAAmB,SAACC,GACrB,OAAIJ,EAAKF,MAAMO,OAASD,EAASC,KACtBL,EAAKF,MAAMQ,WAAaF,EAASE,UAExCN,EAAKD,IAAIM,OAASD,EAASC,KACpBL,EAAKD,IAAIO,WAAaF,EAASE,UAEnCN,EAAKF,MAAMO,MAAQD,EAASC,MAAQL,EAAKD,IAAIM,MAAQD,EAASC,IACjF,EACQH,KAAKJ,MAAQA,EACbI,KAAKH,IAAMA,CACd,CAMA,OANAQ,EAAAA,EAAAA,GAAAV,EAAA,EAAAW,IAAA,WAAAC,MACD,SAASJ,EAAMC,GACXJ,KAAKJ,MAAQ,IAAIY,EAASL,EAAMC,EACnC,IAAAE,IAAA,SAAAC,MACD,SAAOJ,EAAMC,GACTJ,KAAKH,IAAM,IAAIW,EAASL,EAAMC,EACjC,KAAAT,CAAA,CAnBQ,GAANc,EAAAd,EAAA,aAqBMa,EAAA,WACT,SAAAA,EAAYL,EAAMC,GAAW,IAAAM,EAAA,MAAAX,EAAAA,EAAAA,GAAA,KAAAS,GACzBR,KAAKW,kBAAoB,SAACT,GAAA,OAAaQ,EAAKP,KAAOD,EAASC,MACvDO,EAAKP,OAASD,EAASC,MAAQO,EAAKN,WAAaF,EAASE,SAAA,EAC/DJ,KAAKG,KAAOA,EACZH,KAAKI,UAAYA,CACpB,CAMA,OANAC,EAAAA,EAAAA,GAAAG,EAAA,EAAAF,IAAA,UAAAC,MACD,SAAQJ,GACJH,KAAKG,KAAOA,CACf,IAAAG,IAAA,eAAAC,MACD,SAAaH,GACTJ,KAAKI,UAAYA,CACpB,KAAAI,CAAA,CAZQ,GAANC,EAAAD,EAAA,W,yUCPA,SAASI,EAAuBC,GACrC,MAAO,CACLC,MAAK,SAACC,GACJ,IAAMC,EAAWH,EAAQI,cACnBC,EACS,OAAbF,QAAkC,IAAbA,OACjB,EACAA,EAASE,kBAEf,GAAIF,GAAiC,MAArBE,EAA2B,CACzC,IAAMC,EAAaN,EAAQO,gBACb,MAAdD,IAAsBE,EAAAA,EAAAA,IAAU,GAChCR,EAAQS,YACN,IAAIC,EAAAA,GAAa,aAADC,OACDL,EAAWM,KAAI,KAAAD,OAAIR,EAASS,KAAI,oBAAAD,OAAmBN,GAChE,CACEQ,MAAOX,IAIf,CACF,EAEAY,SAAQ,SAACZ,GACP,IAAMa,EAASf,EAAQgB,cACjBX,EACO,OAAXU,QAA8B,IAAXA,OACf,EACAA,EAAOV,kBAEb,GAAIU,GAA+B,MAArBV,EAA2B,CACvC,IAAMY,EAAejB,EAAQkB,eAE7B,GAAoB,MAAhBD,EACFjB,EAAQS,YACN,IAAIC,EAAAA,GAAa,eAADC,OACCM,EAAaL,KAAI,gBAAAD,OAAeI,EAAOH,KAAI,qBAAAD,OAAoBN,GAC9E,CACEQ,MAAOX,SAIR,CACL,IAAMI,EAAaN,EAAQO,gBACrBJ,EAAWH,EAAQI,cACV,MAAdE,GAAkC,MAAZH,IAAqBK,EAAAA,EAAAA,IAAU,GACtDR,EAAQS,YACN,IAAIC,EAAAA,GAAa,UAADC,OACJL,EAAWM,KAAI,KAAAD,OAAIR,EAASS,KAAI,gBAAAD,OAAeI,EAAOH,KAAI,qBAAAD,OAAoBN,GACxF,CACEQ,MAAOX,IAIf,CACF,CACF,EAEAiB,YAAW,SAACjB,GACV,IAAMkB,GAAiBC,EAAAA,EAAAA,IAAarB,EAAQsB,sBAE5C,IAAIC,EAAAA,EAAAA,IAAkBH,GAAiB,CACrC,IAAMI,EAAgBJ,EAAeK,YAAYvB,EAAKU,KAAKlB,OACrDW,EACc,OAAlBmB,QAA4C,IAAlBA,OACtB,EACAA,EAAcnB,kBAEK,MAArBA,GACFL,EAAQS,YACN,IAAIC,EAAAA,GAAa,mBAADC,OACKS,EAAeR,KAAI,KAAAD,OAAIa,EAAcZ,KAAI,oBAAAD,OAAmBN,GAC/E,CACEQ,MAAOX,IAKjB,CACF,EAEAwB,UAAS,SAACxB,GACR,IAAMyB,EAAe3B,EAAQ4B,eACvBvB,EACa,OAAjBsB,QAA0C,IAAjBA,OACrB,EACAA,EAAatB,kBAEnB,GAAIsB,GAAqC,MAArBtB,EAA2B,CAC7C,IAAMwB,GAAcR,EAAAA,EAAAA,IAAarB,EAAQ8B,gBAC1B,MAAfD,IAAuBrB,EAAAA,EAAAA,IAAU,GACjCR,EAAQS,YACN,IAAIC,EAAAA,GAAa,mBAADC,OACKkB,EAAYjB,KAAI,KAAAD,OAAIgB,EAAaf,KAAI,qBAAAD,OAAoBN,GAC5E,CACEQ,MAAOX,IAIf,CACF,EAEJ,C,+ICnHM6B,EAAoB,CACtBC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,EACAC,EAAAA,GAEG,SAAAC,EAAiCC,EAAQC,EAAKC,EAAaC,EAAmBC,GACjF,IAAMC,EAAQC,EAAAA,EAAeC,QAAO,SAAAC,GAChC,OAAIA,IAASC,EAAAA,GAAyBD,IAASE,EAAAA,KAG3CP,GAAqBK,IAASG,EAAAA,EAI1C,IAQI,OAPIT,GACAU,MAAMC,UAAUC,KAAKC,MAAMV,EAAOH,GAElCE,GACAQ,MAAMC,UAAUC,KAAKC,MAAMV,EAAOnB,IAEvB8B,EAAAA,EAAAA,IAAShB,EAAQC,EAAKI,GACvBE,QAAO,SAAAU,GACjB,GAAIA,EAAMC,QAAQC,SAAS,sBAAwBF,EAAMjD,MAAO,CAC5D,IAAMX,EAAO4D,EAAMjD,MAAM,GACzB,GAAIX,GAAQA,EAAK+D,OAASC,EAAAA,EAAKC,UAAW,CACtC,IAAMvD,EAAOV,EAAKU,KAAKlB,MACvB,GAAa,cAATkB,GAAiC,wBAATA,EACxB,OAAO,CAEd,CACJ,CACD,OAAO,CACf,GACA,CA7BgBhB,EAAAgD,EAAA,2BCZT,IAAMwB,EACF,QADEA,EAEA,UAFAA,EAGI,cAHJA,EAIH,OAEGC,GAAAC,EAAA,IAAAC,EAAAA,EAAAA,GAAAD,EACRF,EAAiB,IAAAG,EAAAA,EAAAA,GAAAD,EACjBF,EAAmB,IAAAG,EAAAA,EAAAA,GAAAD,EACnBF,EAAuB,IAAAG,EAAAA,EAAAA,GAAAD,EACvBF,EAAgB,GAAAE,GAEf9D,EAAYZ,GAAC,SAAA4E,EAAWT,GAC1B,IAAKS,EACD,MAAM,IAAIC,MAAMV,EAExB,GAJkB,aAKX,SAAAW,EAAwBC,GAAyE,IAChGC,EAAIC,EAD0BhC,EAAAiC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAS,KAAM/B,EAAA+B,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAahC,EAAA8B,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAmBC,EAAAH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAE7ElC,EAAM,KACNoC,EAAY,GACZD,IACAC,EACiC,kBAAtBD,EACDA,EACAA,EAAkBE,QAAO,SAACC,EAAKlF,GAAA,OAASkF,GAAMC,EAAAA,EAAAA,GAAMnF,GAAQ,SAAQ,KAElF,IAAMoF,EAAgBJ,EAAA,GAAAvE,OAAegE,EAAA,QAAAhE,OAAYuE,GAAcP,EAC/D,IACI7B,GAAMyC,EAAAA,EAAAA,IAAMD,EACf,OACMxB,GACH,GAAIA,aAAiBpD,EAAAA,GAAc,CAC/B,IAAM8E,EAAQC,EAAsF,QAA5EZ,EAAgC,QAA1BD,EAAKd,EAAM4B,iBAA8B,IAAPd,OAAgB,EAASA,EAAG,UAAuB,IAAPC,EAAgBA,EAAK,CAAEvF,KAAM,EAAGqG,OAAQ,GAAKL,GACzJ,MAAO,CACH,CACIM,SAAUvB,EAAoBI,MAC9BV,QAASD,EAAMC,QACf8B,OAAQ,kBACRL,MAAAA,GAGX,CACD,MAAM1B,CACT,CACD,OAAOgC,EAAchD,EAAKD,EAAQE,EAAaC,EACnD,CACO,SAAA8C,EAAuBhD,GAAoD,IAA/CD,EAAAiC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAS,KACxC,IAAKjC,EACD,MAAO,GAEX,IAAMkD,EAA6BnD,EAAwBC,EAAQC,EAJrBgC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAaF,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAI6CgB,SAAQ,SAAAlC,GAAA,OAASmC,EAAYnC,EAAOO,EAAoBI,MAAO,aAAa,IAC9KyB,GAAgCrC,EAAAA,EAAAA,IAAShB,EAAQC,EAAK,CACxD/C,IACDiG,SAAQ,SAAAlC,GAAA,OAASmC,EAAYnC,EAAOO,EAAoB8B,QAAS,cAAc,IAClF,OAAOJ,EAA2BpF,OAAOuF,EAC7C,CACA,SAAAD,EAAqBnC,EAAO8B,EAAUQ,GAClC,IAAKtC,EAAMjD,MACP,MAAO,GAEX,IACoCwF,EAD9BC,EAAmB,GAAAC,GAAAC,EAAAA,EAAAA,GACD1C,EAAMjD,MAAM4F,WAAA,IAApC,IAAAF,EAAAG,MAAAL,EAAAE,EAAAI,KAAAC,MAA+C,KAAAC,GAAAC,EAAAA,EAAAA,GAAAT,EAAA3G,MAAA,GAAnCqH,EAAAF,EAAA,GAAG3G,EAAA2G,EAAA,GACLG,EAA8B,aAAd9G,EAAK+D,MAAuB,SAAU/D,QAAsB,IAAdA,EAAKU,KACnEV,EAAKU,KACL,aAAcV,QAA0B,IAAlBA,EAAK+G,SACvB/G,EAAK+G,SACL/G,EACV,GAAI8G,EAAe,CACfxG,EAAUsD,EAAM4B,UAAW,gDAC3B,IAAMwB,EAAMpD,EAAM4B,UAAUqB,GACtBI,EAAeC,EAAYJ,GAC3BhI,EAAMkI,EAAIvB,QAAUwB,EAAanI,IAAMmI,EAAapI,OAC1DuH,EAAiB3C,KAAK,CAClBkC,OAAA,YAAAlF,OAAoByF,GACpBrC,QAASD,EAAMC,QACf6B,SAAAA,EACAJ,MAAO,IAAI1G,EAAAA,EAAM,IAAIa,EAAAA,EAASuH,EAAI5H,KAAO,EAAG4H,EAAIvB,OAAS,GAAI,IAAIhG,EAAAA,EAASuH,EAAI5H,KAAO,EAAGN,KAE/F,CACJ,QAAAqI,GAAAd,EAAAe,EAAAD,EAAA,SAAAd,EAAAgB,GAAA,CACD,OAAOjB,CACX,CACO,SAAAb,EAAkB+B,EAAUC,GAC/B,IAAMC,GAASC,EAAAA,EAAAA,KACTC,EAAQF,EAAOG,aACfC,EAAQL,EAAUM,MAAM,MAC9BvH,EAAUsH,EAAM/C,QAAUyC,EAASlI,KAAM,iEAEzC,IADA,IAAI0I,EAAS,KACJjB,EAAI,EAAGA,EAAIS,EAASlI,KAAMyH,IAE/B,IADAiB,EAAS,IAAIC,EAAAA,EAAgBH,EAAMf,KAC3BiB,EAAOE,OAAO,CAElB,GAAc,gBADAR,EAAOS,MAAMH,EAAQJ,GAE/B,KAEP,CAELpH,EAAUwH,EAAQ,2CAClB,IAAM1I,EAAOkI,EAASlI,KAAO,EACvBP,EAAQiJ,EAAOI,kBACfpJ,EAAMgJ,EAAOK,qBACnB,OAAO,IAAIvJ,EAAAA,EAAM,IAAIa,EAAAA,EAASL,EAAMP,GAAQ,IAAIY,EAAAA,EAASL,EAAMN,GACnE,CACA,SAAAoI,EAAqBlH,GACjB,IACMsH,EADiBtH,EACSgH,IAEhC,OADA1G,EAAUgH,EAAU,wCACbA,CACX,CA5FgB5H,EAAA8E,EAAA,kBA8BA9E,EAAAkG,EAAA,iBAUPlG,EAAAqG,EAAA,eA0BOrG,EAAA6F,EAAA,YAqBP7F,EAAAwH,EAAA,eCzGT,IAAMkB,EAAW,CAAC,QAAS,UAAW,cAAe,QAC/CC,EAAO,CACT,sBAAuB,aACvB,uBAAwB,cACxB,kBAAmB,UAEvBC,EAAAA,EAAWC,eAAe,OAAQ,WAAW,SAACC,EAAMC,GAUhD,OARmBjE,EAAegE,EADqBC,EAA/C9F,OAA+C8F,EAAvCC,qBACiD,EADVD,EAAtB1D,mBAEN4D,KAAI,SAAA/E,GAAA,MAAU,CACrCC,QAASD,EAAMC,QACf6B,SAAU9B,EAAM8B,SAAW0C,EAASxE,EAAM8B,SAAW,GAAK0C,EAAS,GACnElC,KAAMtC,EAAM+B,OAAS0C,EAAKzE,EAAM+B,aAAU,EAC1CiD,KAAMN,EAAAA,EAAWO,IAAIjF,EAAM0B,MAAMzG,MAAMO,KAAMwE,EAAM0B,MAAMzG,MAAMQ,WAC/DyJ,GAAIR,EAAAA,EAAWO,IAAIjF,EAAM0B,MAAMxG,IAAIM,KAAMwE,EAAM0B,MAAMxG,IAAIO,WAC5D,GAEL,G","sources":["../node_modules/@graphiql/graphql-language-service/esm/utils/Range.js","../node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs","../node_modules/@graphiql/graphql-language-service/esm/utils/validateWithCustomRules.js","../node_modules/@graphiql/graphql-language-service/esm/interface/getDiagnostics.js","../node_modules/@graphiql/codemirror-graphql/esm/lint.js"],"sourcesContent":["export class Range {\n    constructor(start, end) {\n        this.containsPosition = (position) => {\n            if (this.start.line === position.line) {\n                return this.start.character <= position.character;\n            }\n            if (this.end.line === position.line) {\n                return this.end.character >= position.character;\n            }\n            return this.start.line <= position.line && this.end.line >= position.line;\n        };\n        this.start = start;\n        this.end = end;\n    }\n    setStart(line, character) {\n        this.start = new Position(line, character);\n    }\n    setEnd(line, character) {\n        this.end = new Position(line, character);\n    }\n}\nexport class Position {\n    constructor(line, character) {\n        this.lessThanOrEqualTo = (position) => this.line < position.line ||\n            (this.line === position.line && this.character <= position.character);\n        this.line = line;\n        this.character = character;\n    }\n    setLine(line) {\n        this.line = line;\n    }\n    setCharacter(character) {\n        this.character = character;\n    }\n}\nexport function offsetToPosition(text, loc) {\n    const EOL = '\\n';\n    const buf = text.slice(0, loc);\n    const lines = buf.split(EOL).length - 1;\n    const lastLineIndex = buf.lastIndexOf(EOL);\n    return new Position(lines, loc - lastLineIndex - 1);\n}\nexport function locToRange(text, loc) {\n    const start = offsetToPosition(text, loc.start);\n    const end = offsetToPosition(text, loc.end);\n    return new Range(start, end);\n}\n//# sourceMappingURL=Range.js.map","import { invariant } from '../../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../../error/GraphQLError.mjs';\nimport { getNamedType, isInputObjectType } from '../../../type/definition.mjs';\n\n/**\n * No deprecated\n *\n * A GraphQL document is only valid if all selected fields and all used enum values have not been\n * deprecated.\n *\n * Note: This rule is optional and is not part of the Validation section of the GraphQL\n * Specification. The main purpose of this rule is detection of deprecated usages and not\n * necessarily to forbid their use when querying a service.\n */\nexport function NoDeprecatedCustomRule(context) {\n  return {\n    Field(node) {\n      const fieldDef = context.getFieldDef();\n      const deprecationReason =\n        fieldDef === null || fieldDef === void 0\n          ? void 0\n          : fieldDef.deprecationReason;\n\n      if (fieldDef && deprecationReason != null) {\n        const parentType = context.getParentType();\n        parentType != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The field ${parentType.name}.${fieldDef.name} is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    Argument(node) {\n      const argDef = context.getArgument();\n      const deprecationReason =\n        argDef === null || argDef === void 0\n          ? void 0\n          : argDef.deprecationReason;\n\n      if (argDef && deprecationReason != null) {\n        const directiveDef = context.getDirective();\n\n        if (directiveDef != null) {\n          context.reportError(\n            new GraphQLError(\n              `Directive \"@${directiveDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        } else {\n          const parentType = context.getParentType();\n          const fieldDef = context.getFieldDef();\n          (parentType != null && fieldDef != null) || invariant(false);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${parentType.name}.${fieldDef.name}\" argument \"${argDef.name}\" is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const inputObjectDef = getNamedType(context.getParentInputType());\n\n      if (isInputObjectType(inputObjectDef)) {\n        const inputFieldDef = inputObjectDef.getFields()[node.name.value];\n        const deprecationReason =\n          inputFieldDef === null || inputFieldDef === void 0\n            ? void 0\n            : inputFieldDef.deprecationReason;\n\n        if (deprecationReason != null) {\n          context.reportError(\n            new GraphQLError(\n              `The input field ${inputObjectDef.name}.${inputFieldDef.name} is deprecated. ${deprecationReason}`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    EnumValue(node) {\n      const enumValueDef = context.getEnumValue();\n      const deprecationReason =\n        enumValueDef === null || enumValueDef === void 0\n          ? void 0\n          : enumValueDef.deprecationReason;\n\n      if (enumValueDef && deprecationReason != null) {\n        const enumTypeDef = getNamedType(context.getInputType());\n        enumTypeDef != null || invariant(false);\n        context.reportError(\n          new GraphQLError(\n            `The enum value \"${enumTypeDef.name}.${enumValueDef.name}\" is deprecated. ${deprecationReason}`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n","import { specifiedRules, validate, NoUnusedFragmentsRule, KnownFragmentNamesRule, Kind, ExecutableDefinitionsRule, LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, } from 'graphql';\nconst specifiedSDLRules = [\n    LoneSchemaDefinitionRule,\n    UniqueOperationTypesRule,\n    UniqueTypeNamesRule,\n    UniqueEnumValueNamesRule,\n    UniqueFieldDefinitionNamesRule,\n    UniqueDirectiveNamesRule,\n    KnownTypeNamesRule,\n    KnownDirectivesRule,\n    UniqueDirectivesPerLocationRule,\n    PossibleTypeExtensionsRule,\n    UniqueArgumentNamesRule,\n    UniqueInputFieldNamesRule,\n];\nexport function validateWithCustomRules(schema, ast, customRules, isRelayCompatMode, isSchemaDocument) {\n    const rules = specifiedRules.filter(rule => {\n        if (rule === NoUnusedFragmentsRule || rule === ExecutableDefinitionsRule) {\n            return false;\n        }\n        if (isRelayCompatMode && rule === KnownFragmentNamesRule) {\n            return false;\n        }\n        return true;\n    });\n    if (customRules) {\n        Array.prototype.push.apply(rules, customRules);\n    }\n    if (isSchemaDocument) {\n        Array.prototype.push.apply(rules, specifiedSDLRules);\n    }\n    const errors = validate(schema, ast, rules);\n    return errors.filter(error => {\n        if (error.message.includes('Unknown directive') && error.nodes) {\n            const node = error.nodes[0];\n            if (node && node.kind === Kind.DIRECTIVE) {\n                const name = node.name.value;\n                if (name === 'arguments' || name === 'argumentDefinitions') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    });\n}\n//# sourceMappingURL=validateWithCustomRules.js.map","import { GraphQLError, print, validate, NoDeprecatedCustomRule, parse, } from 'graphql';\nimport { CharacterStream, onlineParser } from '../parser';\nimport { Range, validateWithCustomRules, Position } from '../utils';\nexport const SEVERITY = {\n    Error: 'Error',\n    Warning: 'Warning',\n    Information: 'Information',\n    Hint: 'Hint',\n};\nexport const DIAGNOSTIC_SEVERITY = {\n    [SEVERITY.Error]: 1,\n    [SEVERITY.Warning]: 2,\n    [SEVERITY.Information]: 3,\n    [SEVERITY.Hint]: 4,\n};\nconst invariant = (condition, message) => {\n    if (!condition) {\n        throw new Error(message);\n    }\n};\nexport function getDiagnostics(query, schema = null, customRules, isRelayCompatMode, externalFragments) {\n    var _a, _b;\n    let ast = null;\n    let fragments = '';\n    if (externalFragments) {\n        fragments =\n            typeof externalFragments === 'string'\n                ? externalFragments\n                : externalFragments.reduce((acc, node) => acc + print(node) + '\\n\\n', '');\n    }\n    const enhancedQuery = fragments ? `${query}\\n\\n${fragments}` : query;\n    try {\n        ast = parse(enhancedQuery);\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            const range = getRange((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { line: 0, column: 0 }, enhancedQuery);\n            return [\n                {\n                    severity: DIAGNOSTIC_SEVERITY.Error,\n                    message: error.message,\n                    source: 'GraphQL: Syntax',\n                    range,\n                },\n            ];\n        }\n        throw error;\n    }\n    return validateQuery(ast, schema, customRules, isRelayCompatMode);\n}\nexport function validateQuery(ast, schema = null, customRules, isRelayCompatMode) {\n    if (!schema) {\n        return [];\n    }\n    const validationErrorAnnotations = validateWithCustomRules(schema, ast, customRules, isRelayCompatMode).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Error, 'Validation'));\n    const deprecationWarningAnnotations = validate(schema, ast, [\n        NoDeprecatedCustomRule,\n    ]).flatMap(error => annotations(error, DIAGNOSTIC_SEVERITY.Warning, 'Deprecation'));\n    return validationErrorAnnotations.concat(deprecationWarningAnnotations);\n}\nfunction annotations(error, severity, type) {\n    if (!error.nodes) {\n        return [];\n    }\n    const highlightedNodes = [];\n    for (const [i, node] of error.nodes.entries()) {\n        const highlightNode = node.kind !== 'Variable' && 'name' in node && node.name !== undefined\n            ? node.name\n            : 'variable' in node && node.variable !== undefined\n                ? node.variable\n                : node;\n        if (highlightNode) {\n            invariant(error.locations, 'GraphQL validation error requires locations.');\n            const loc = error.locations[i];\n            const highlightLoc = getLocation(highlightNode);\n            const end = loc.column + (highlightLoc.end - highlightLoc.start);\n            highlightedNodes.push({\n                source: `GraphQL: ${type}`,\n                message: error.message,\n                severity,\n                range: new Range(new Position(loc.line - 1, loc.column - 1), new Position(loc.line - 1, end)),\n            });\n        }\n    }\n    return highlightedNodes;\n}\nexport function getRange(location, queryText) {\n    const parser = onlineParser();\n    const state = parser.startState();\n    const lines = queryText.split('\\n');\n    invariant(lines.length >= location.line, 'Query text must have more lines than where the error happened');\n    let stream = null;\n    for (let i = 0; i < location.line; i++) {\n        stream = new CharacterStream(lines[i]);\n        while (!stream.eol()) {\n            const style = parser.token(stream, state);\n            if (style === 'invalidchar') {\n                break;\n            }\n        }\n    }\n    invariant(stream, 'Expected Parser stream to be available.');\n    const line = location.line - 1;\n    const start = stream.getStartOfToken();\n    const end = stream.getCurrentPosition();\n    return new Range(new Position(line, start), new Position(line, end));\n}\nfunction getLocation(node) {\n    const typeCastedNode = node;\n    const location = typeCastedNode.loc;\n    invariant(location, 'Expected ASTNode to have a location.');\n    return location;\n}\n//# sourceMappingURL=getDiagnostics.js.map","import CodeMirror from 'codemirror';\nimport { getDiagnostics } from 'graphql-language-service';\nconst SEVERITY = ['error', 'warning', 'information', 'hint'];\nconst TYPE = {\n    'GraphQL: Validation': 'validation',\n    'GraphQL: Deprecation': 'deprecation',\n    'GraphQL: Syntax': 'syntax',\n};\nCodeMirror.registerHelper('lint', 'graphql', (text, options) => {\n    const { schema, validationRules, externalFragments } = options;\n    const rawResults = getDiagnostics(text, schema, validationRules, undefined, externalFragments);\n    const results = rawResults.map(error => ({\n        message: error.message,\n        severity: error.severity ? SEVERITY[error.severity - 1] : SEVERITY[0],\n        type: error.source ? TYPE[error.source] : undefined,\n        from: CodeMirror.Pos(error.range.start.line, error.range.start.character),\n        to: CodeMirror.Pos(error.range.end.line, error.range.end.character),\n    }));\n    return results;\n});\n//# sourceMappingURL=lint.js.map"],"names":["Range","start","end","_this","_classCallCheck","this","containsPosition","position","line","character","_createClass","key","value","Position","__name","_this2","lessThanOrEqualTo","NoDeprecatedCustomRule","context","Field","node","fieldDef","getFieldDef","deprecationReason","parentType","getParentType","invariant","reportError","GraphQLError","concat","name","nodes","Argument","argDef","getArgument","directiveDef","getDirective","ObjectField","inputObjectDef","getNamedType","getParentInputType","isInputObjectType","inputFieldDef","getFields","EnumValue","enumValueDef","getEnumValue","enumTypeDef","getInputType","specifiedSDLRules","LoneSchemaDefinitionRule","UniqueOperationTypesRule","UniqueTypeNamesRule","UniqueEnumValueNamesRule","UniqueFieldDefinitionNamesRule","UniqueDirectiveNamesRule","KnownTypeNamesRule","KnownDirectivesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","UniqueArgumentNamesRule","UniqueInputFieldNamesRule","validateWithCustomRules","schema","ast","customRules","isRelayCompatMode","isSchemaDocument","rules","specifiedRules","filter","rule","NoUnusedFragmentsRule","ExecutableDefinitionsRule","KnownFragmentNamesRule","Array","prototype","push","apply","validate","error","message","includes","kind","Kind","DIRECTIVE","SEVERITY$1","DIAGNOSTIC_SEVERITY","_DIAGNOSTIC_SEVERITY","_defineProperty","condition","Error","getDiagnostics","query","_a","_b","arguments","length","undefined","externalFragments","fragments","reduce","acc","print","enhancedQuery","parse","range","getRange","locations","column","severity","source","validateQuery","validationErrorAnnotations","flatMap","annotations","deprecationWarningAnnotations","Warning","type","_step","highlightedNodes","_iterator","_createForOfIteratorHelper","entries","s","n","done","_step$value","_slicedToArray","i","highlightNode","variable","loc","highlightLoc","getLocation","err","e","f","location","queryText","parser","onlineParser","state","startState","lines","split","stream","CharacterStream","eol","token","getStartOfToken","getCurrentPosition","SEVERITY","TYPE","CodeMirror","registerHelper","text","options","validationRules","map","from","Pos","to"],"sourceRoot":""}
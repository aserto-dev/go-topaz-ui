{"version":3,"file":"static/js/5021.e5302d08.chunk.js","mappings":"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","sources":["components/DeleteConfirmationModal/styles.ts","components/DeleteConfirmationModal/index.tsx","lib/validation/ConfigurationAddressValidator.ts","views/ConfigurationsSettings/styles.tsx","views/ConfigurationsSettings/index.tsx","api/externalConfig.ts","assets/no-users.svg","views/EmptyConfigs/index.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const ContentContainer = styled.div`\n  padding: 20px;\n  width: 100%;\n  height: fit-content;\n`\nexport const TextArea = styled.div`\n  font-size: 16px;\n`\nexport const Text = styled.div<{ bold?: boolean }>`\n  display: flex;\n  font-weight: ${({ bold }) => (bold ? 'bold' : 500)};\n`\n\nexport const InputContainer = styled.div`\n  input {\n    width: 600px;\n  }\n`\n\nexport const ButtonsContainer = styled.div`\n  width: 100%;\n  flex: 1 1 0%;\n  justify-content: flex-start;\n  align-items: flex-start;\n  float: right;\n  display: flex;\n  margin-top: 60px;\n  button:first-of-type {\n    margin-right: 10px;\n  }\n`\n","import React from 'react'\nimport { Button, CardModal } from '@aserto/console-common'\n\nimport { ButtonsContainer, ContentContainer, TextArea } from './styles'\n\nexport type DeleteConfirmationModalProps = {\n  redirectUrl: string\n  show: boolean\n  onHide: () => void\n  subject: string\n  onClickRemove: () => void\n}\n\nconst DeleteConfirmationModal: React.FC<DeleteConfirmationModalProps> = ({\n  onHide,\n  show,\n  subject,\n  onClickRemove,\n}) => {\n  const onClickHideButton = onHide\n\n  return (\n    <>\n      <CardModal\n        cardHeight=\"100%\"\n        show={show}\n        title={`Delete ${subject}`}\n        variant=\"delete_danger\"\n        onHide={onClickHideButton}\n      >\n        <ContentContainer>\n          <TextArea>Are you sure you want to delete your {subject}?</TextArea>\n          <ButtonsContainer>\n            <Button variant=\"secondary\" onClick={onClickHideButton}>\n              Cancel\n            </Button>\n            <Button data-testid=\"delete-subject\" variant=\"danger\" onClick={onClickRemove}>\n              Delete\n            </Button>\n          </ButtonsContainer>\n        </ContentContainer>\n      </CardModal>\n    </>\n  )\n}\n\nexport default DeleteConfirmationModal\n","import { Validator, Validity } from '@aserto/console-common'\n\n// Must start with a-z, and must be alphanumeric (or dashes) 6-30 characters\nconst CONFIGURATION_ADDRESS_REGEXP = /^(https?:\\/\\/[a-zA-Z0-9.-]+:\\d+(\\/[a-zA-Z0-9_/]+)?)$/\n\nconst getValidityOf = (address: string): Validity => {\n  if (CONFIGURATION_ADDRESS_REGEXP.test(address)) {\n    return 'VALID'\n  }\n  return 'INVALID'\n}\n\nconst isValid = (address: string) => getValidityOf(address) === 'VALID'\n\nconst ConfigurationAddressValidator: Validator<string> = {\n  getValidityOf,\n  isValid,\n  ruleText: 'Should be formed of an address and a port from topaz. It can be either https or http.',\n}\n\nexport default ConfigurationAddressValidator\n","import styled from 'styled-components'\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin: 1rem 6rem;\n  input {\n    width: 700px;\n  }\n  label {\n    font-size: 14px;\n  }\n`\nexport const ConfigureContainer = styled(InputContainer)`\n  margin: 0rem 6rem;\n`\nexport const ConfigureDiv = styled.div`\n  margin-top: 2rem;\n`\nexport const ConfigureContainerButton = styled.div`\n  margin-bottom: 60px;\n`\nexport const DeleteContainer = styled.div`\n  margin-top: 80px;\n  margin-left: 80px;\n  flex-direction: column;\n  font-family: Roboto;\n  width: 80%;\n  padding: 20px;\n  @media (max-width: 812px) {\n    display: block;\n    width: 100%;\n  }\n`\nexport const DeleteText = styled.div<{ bold?: boolean; color?: string; size?: string }>`\n  font-weight: ${({ bold }) => (bold ? 'bold' : 100)};\n  font-size: ${({ size }) => size};\n  color: ${({ color }) => color};\n  padding-top: 8px;\n`\n\nexport const ButtonsContainer = styled.div`\n  margin-top: 12px;\n  display: flex;\n  margin-left: 100px;\n  gap: 10px;\n`\nexport const SelectContainer = styled.div`\n  width: 700px;\n`\n","import copy from 'copy-to-clipboard'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport {\n  ActionableInput,\n  Button,\n  PaddedContent,\n  Select,\n  useShowError,\n  useShowSuccessMessage,\n  ValidatedInput,\n} from '@aserto/console-common'\n\nimport { BaseConfiguration, ConfigurationType } from '../../../common/types'\nimport { useFetchExternalConfig } from '../../api/externalConfig'\nimport {\n  useConfiguration,\n  useRemoveConfiguration,\n  useUpdateConfiguration,\n} from '../../api/internal'\nimport DeleteConfirmationModal from '../../components/DeleteConfirmationModal'\nimport ConfigurationAddressValidator from '../../lib/validation/ConfigurationAddressValidator'\nimport { useActiveConfigurationName } from '../../services/ActiveConfiguration'\nimport EmptyConfigs from '../EmptyConfigs'\nimport {\n  ButtonsContainer,\n  ConfigureContainer,\n  ConfigureContainerButton,\n  ConfigureDiv,\n  InputContainer,\n  SelectContainer,\n} from './styles'\n\nconst AUTO_CONFIGURATION_TYPE = 'auto'\nconst MANUAL_CONFIGURATION_TYPE = 'manual'\nconst CENTRAL_DIRECTORY_CONFIGURATION_TYPE = 'central_directory'\n\nconst ConfigurationsSettings: React.FC = () => {\n  const { data } = useConfiguration()\n  const { configurationName: configName, setConfigurationName } = useActiveConfigurationName()\n  const [configType, setConfigType] = useState<ConfigurationType>(AUTO_CONFIGURATION_TYPE)\n  const [automaticAddress, setAutomaticAddress] = useState<string | undefined>('')\n  const [apiKey, setApiKey] = useState<string | undefined>('')\n  const [isAutomaticGenerated, setIsAutomaticGenerated] = useState<boolean>(false)\n  const [configuration, setConfiguration] = useState<BaseConfiguration>({\n    authorizerServiceUrl: '',\n    authorizerApiKey: '',\n    directoryServiceUrl: '',\n    directoryApiKey: '',\n    directoryTenantId: '',\n    directoryReaderServiceUrl: '',\n    directoryWriterServiceUrl: '',\n    directoryModelServiceUrl: '',\n  })\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setConfiguration((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }))\n  }\n\n  const handleApiKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setApiKey(e.target.value)\n  }\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const { data: configData, refetch } = useFetchExternalConfig(automaticAddress!, apiKey, {\n    enabled: false,\n    onError: (error) => {\n      showError(error)\n    },\n    onSuccess: () => {\n      showMessage('Configuration generated successfully.')\n    },\n  })\n\n  const location = useLocation()\n\n  const showError = useShowError()\n  const showMessage = useShowSuccessMessage()\n  const onClickShowDeleteModal = () => {\n    setShowDeleteModal(true)\n  }\n\n  const configFields = useMemo(() => {\n    return data?.configs?.find((e) => e.name === configName)\n  }, [configName, data?.configs])\n\n  const configOptions = [\n    { label: 'Automatic', value: AUTO_CONFIGURATION_TYPE },\n    { label: 'Manual', value: MANUAL_CONFIGURATION_TYPE },\n    { label: 'Central Directory', value: CENTRAL_DIRECTORY_CONFIGURATION_TYPE },\n  ]\n\n  const { mutate: updateConfiguration } = useUpdateConfiguration({\n    onError: (e) => {\n      showError(e)\n    },\n    onSuccess: () => {\n      showMessage('Configuration updated successfully.')\n    },\n  })\n\n  const { mutateAsync: removeConfiguration } = useRemoveConfiguration({\n    onSuccess: () => {\n      showMessage('Configuration deleted successfully.')\n      const activeConfig = (data?.configs?.filter((data) => data.name !== configName) || [])[0]\n        ?.name\n      if (activeConfig) {\n        setConfigurationName(activeConfig)\n      } else {\n        setConfigurationName('')\n      }\n    },\n    onError: (error) => {\n      showError(error)\n    },\n  })\n\n  const onClickRemoveConfiguration = (configName: string) => {\n    if (configName) {\n      removeConfiguration(configName)\n    }\n  }\n\n  const dataConfigs = useMemo(() => {\n    return configData?.configs || []\n  }, [configData?.configs])\n\n  const isAutomaticAddressValid = useMemo(() => {\n    return ConfigurationAddressValidator.isValid(automaticAddress!)\n  }, [automaticAddress])\n\n  useEffect(() => {\n    if (configFields?.configurationType) {\n      setConfigType(configFields?.configurationType as ConfigurationType)\n    }\n  }, [configFields?.configurationType, setConfigType])\n\n  useEffect(() => {\n    if (configFields) {\n      setConfiguration(configFields)\n    }\n  }, [configFields, setConfiguration])\n\n  useEffect(() => {\n    if (configFields?.address) {\n      setAutomaticAddress(configFields.address)\n    }\n  }, [, configFields?.address, setAutomaticAddress])\n\n  useEffect(() => {\n    if (dataConfigs.length > 0) {\n      setConfiguration(dataConfigs[0])\n      setIsAutomaticGenerated(true)\n    }\n  }, [dataConfigs, setConfiguration, setIsAutomaticGenerated])\n\n  useEffect(() => {\n    if (\n      location.state?.configuration &&\n      Object.keys(configFields || {})\n        .sort()\n        .toString() === ['name'].toString()\n    ) {\n      setConfigType(AUTO_CONFIGURATION_TYPE)\n      setAutomaticAddress('')\n      setApiKey('')\n      setIsAutomaticGenerated(false)\n      setConfiguration(location.state?.configuration)\n    }\n  }, [\n    location.state,\n    setConfiguration,\n    setConfigType,\n    setAutomaticAddress,\n    setIsAutomaticGenerated,\n    configFields,\n  ])\n\n  useEffect(() => {\n    if (configFields?.address) {\n      setIsAutomaticGenerated(true)\n    }\n  }, [configFields?.address, setIsAutomaticGenerated])\n\n  if (!data || !data.configs || data.configs.length === 0) {\n    return <EmptyConfigs></EmptyConfigs>\n  }\n\n  const ManualFields = (\n    <>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Service Address\"\n          name=\"directoryServiceUrl\"\n          value={configuration.directoryServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory API Key\"\n          name=\"directoryApiKey\"\n          placeholder={\n            configuration?.directoryApiKey\n              ? '****************************************************************'\n              : ''\n          }\n          shouldShowHideShowButton\n          type=\"password\"\n          value={configuration.directoryApiKey}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Director Tenant ID\"\n          name=\"directoryTenantId\"\n          value={configuration.directoryTenantId}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Authorizer Service Address\"\n          name=\"authorizerServiceUrl\"\n          value={configuration.authorizerServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Authorizer API Key\"\n          name=\"authorizerApiKey\"\n          placeholder={\n            configuration?.authorizerApiKey\n              ? '****************************************************************'\n              : ''\n          }\n          shouldShowHideShowButton\n          type=\"password\"\n          value={configuration.authorizerApiKey}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Reader Service Address\"\n          name=\"directoryReaderServiceUrl\"\n          value={configuration.directoryReaderServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Writer Service Address\"\n          name=\"directoryWriterServiceUrl\"\n          value={configuration.directoryWriterServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Model Service Address\"\n          name=\"directoryModelServiceUrl\"\n          value={configuration.directoryModelServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <ButtonsContainer>\n        <Button\n          onClick={() =>\n            updateConfiguration({\n              name: configName,\n              fields: {\n                configurationType: configType,\n                name: configName,\n                address: automaticAddress,\n                directoryServiceUrl: configuration.directoryServiceUrl,\n                authorizerServiceUrl: configuration.authorizerServiceUrl,\n                authorizerApiKey: configuration.authorizerApiKey,\n                directoryApiKey: configuration.directoryApiKey,\n                directoryTenantId: configuration.directoryTenantId,\n                directoryReaderServiceUrl: configuration.directoryReaderServiceUrl,\n                directoryWriterServiceUrl: configuration.directoryWriterServiceUrl,\n                directoryModelServiceUrl: configuration.directoryModelServiceUrl,\n              },\n            })\n          }\n        >\n          Save\n        </Button>\n        <Button variant=\"danger\" onClick={onClickShowDeleteModal}>\n          Delete\n        </Button>\n      </ButtonsContainer>\n    </>\n  )\n  return (\n    <PaddedContent>\n      <InputContainer>\n        <ActionableInput\n          disabled\n          label=\"Configuration Name\"\n          value={configName}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <SelectContainer>\n          <Select\n            label=\"Configuration Type\"\n            options={configOptions}\n            style={{ width: '700px' }}\n            value={configOptions.find((option) => option.value === configType) || configOptions[0]}\n            onChange={(option) => {\n              const cfgType = String(option?.value) as ConfigurationType\n              if (cfgType === AUTO_CONFIGURATION_TYPE) {\n                setConfiguration(configFields!)\n              }\n              setConfigType(cfgType)\n            }}\n          />\n        </SelectContainer>\n      </InputContainer>\n\n      <DeleteConfirmationModal\n        redirectUrl=\"/\"\n        show={showDeleteModal}\n        subject=\"Configuration\"\n        onClickRemove={() => {\n          onClickRemoveConfiguration(configName!)\n          setShowDeleteModal(false)\n        }}\n        onHide={() => setShowDeleteModal(false)}\n      />\n      <ConfigureDiv>\n        {configType === AUTO_CONFIGURATION_TYPE ? (\n          <ConfigureDiv>\n            {configType === AUTO_CONFIGURATION_TYPE && (\n              <ConfigureContainerButton>\n                <ConfigureContainer>\n                  <ValidatedInput\n                    label=\"Configuration address\"\n                    placeholder=\"https://localhost:8080\"\n                    validator={ConfigurationAddressValidator}\n                    value={automaticAddress}\n                    onChange={setAutomaticAddress}\n                    onClickCopy={copy}\n                  />\n                </ConfigureContainer>\n                <InputContainer>\n                  <ActionableInput\n                    label=\"API key(required only for an address that has authentication enabled)\"\n                    shouldShowHideShowButton\n                    type=\"password\"\n                    value={apiKey}\n                    onChange={handleApiKeyChange}\n                    onClickCopy={copy}\n                  />\n                </InputContainer>\n                <ButtonsContainer>\n                  <Button\n                    disabled={!isAutomaticAddressValid}\n                    onClick={() => {\n                      refetch()\n                    }}\n                  >\n                    Generate configuration\n                  </Button>\n                  {!configData?.success && !configFields?.address && (\n                    <Button variant=\"danger\" onClick={onClickShowDeleteModal}>\n                      Delete\n                    </Button>\n                  )}\n                </ButtonsContainer>\n              </ConfigureContainerButton>\n            )}\n            {isAutomaticGenerated ? ManualFields : <></>}\n          </ConfigureDiv>\n        ) : configType === MANUAL_CONFIGURATION_TYPE ? (\n          ManualFields\n        ) : (\n          <>\n            <InputContainer>\n              <ActionableInput\n                label=\"Directory Service Address\"\n                name=\"directoryServiceUrl\"\n                value={configuration.directoryServiceUrl}\n                onChange={handleInputChange}\n                onClickCopy={copy}\n              />\n            </InputContainer>\n            <InputContainer>\n              <ActionableInput\n                label=\"Directory API Key\"\n                name=\"directoryApiKey\"\n                shouldShowHideShowButton\n                type=\"password\"\n                value={configuration.directoryApiKey}\n                onChange={handleInputChange}\n                onClickCopy={copy}\n              />\n            </InputContainer>\n            <InputContainer>\n              <ActionableInput\n                label=\"Directory Tenant ID\"\n                name=\"directoryTenantId\"\n                value={configuration.directoryTenantId}\n                onChange={handleInputChange}\n                onClickCopy={copy}\n              />\n            </InputContainer>\n            <ButtonsContainer>\n              <Button\n                disabled={\n                  !configuration.directoryTenantId ||\n                  !configuration.directoryServiceUrl ||\n                  !configuration.directoryApiKey\n                }\n                onClick={() =>\n                  updateConfiguration({\n                    name: configName,\n                    fields: {\n                      configurationType: configType,\n                      name: configName,\n                      directoryServiceUrl: configuration.directoryServiceUrl,\n                      directoryApiKey: configuration.directoryApiKey,\n                      directoryTenantId: configuration.directoryTenantId,\n                    },\n                  })\n                }\n              >\n                Save\n              </Button>\n              <Button variant=\"danger\" onClick={onClickShowDeleteModal}>\n                Delete\n              </Button>\n            </ButtonsContainer>\n          </>\n        )}\n      </ConfigureDiv>\n    </PaddedContent>\n  )\n}\n\nexport default ConfigurationsSettings\n","import { useQuery, UseQueryOptions } from 'react-query'\nimport { useAsertoApiWithAnonymousAccess } from '@aserto/console-common'\n\nimport { BaseConfiguration } from '../../common/types'\nimport { QueryKeys } from '../types/local/general'\nimport { RpcStatus } from '../types/local/tenant'\ntype ConfigDataResponse = {\n  success: boolean\n} & { configs: BaseConfiguration[] }\n\nexport const useFetchExternalConfig = (\n  url: string,\n  apiKey?: string,\n  options?: Omit<\n    UseQueryOptions<ConfigDataResponse, RpcStatus, ConfigDataResponse, QueryKeys[]>,\n    'queryKey' | 'queryFn' | 'retry' | 'staleTime'\n  >\n) => {\n  const { get } = useAsertoApiWithAnonymousAccess(url)\n  return useQuery(\n    [url as QueryKeys],\n    () =>\n      get<ConfigDataResponse>({\n        path: '',\n        headerOverrides: apiKey ? { authorization: `Basic ${apiKey}` } : undefined,\n      }),\n    {\n      ...options,\n      enabled: !!url && options?.enabled,\n      retry: false,\n      staleTime: Infinity,\n    }\n  )\n}\n","var _defs, _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgNoUsers(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 200,\n    height: 200,\n    viewBox: \"0 0 200 200\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip-path\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle_1\",\n    \"data-name\": \"Rectangle 1\",\n    width: 82,\n    height: 82,\n    fill: \"#a0a0a0\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip-No-users\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 200,\n    height: 200\n  })))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"No-users\",\n    clipPath: \"url(#clip-No-users)\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_3\",\n    \"data-name\": \"Ellipse 3\",\n    cx: 100,\n    cy: 100,\n    r: 100,\n    fill: \"#2a2a2a\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"User\",\n    transform: \"translate(59 59)\",\n    clipPath: \"url(#clip-path)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"noun_User_1994976\",\n    transform: \"translate(-3.913 -2.5)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group_2\",\n    \"data-name\": \"Group 2\",\n    transform: \"translate(12.7 2.5)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group_1\",\n    \"data-name\": \"Group 1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1\",\n    \"data-name\": \"Path 1\",\n    d: \"M61.84,48.965a1.293,1.293,0,0,0-1.555.086A25.591,25.591,0,0,1,44.913,54.06,26.175,26.175,0,0,1,29.54,49.052a1.451,1.451,0,0,0-1.555-.086C17.8,55.529,12.7,68.4,12.7,83.164c0,10.191,64.425,10.191,64.425,0C77.125,68.4,72.03,55.529,61.84,48.965Z\",\n    transform: \"translate(-12.7 -8.807)\",\n    fill: \"#a0a0a0\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_1\",\n    \"data-name\": \"Ellipse 1\",\n    cx: 19.259,\n    cy: 19.259,\n    r: 19.259,\n    transform: \"translate(12.954 0)\",\n    fill: \"#a0a0a0\"\n  }))))))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgNoUsers);\nexport default __webpack_public_path__ + \"static/media/no-users.608b3a7e4f53bf42798a4f2a5be4c011.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\nimport { EmptyTablePlaceholder, PaddedContent } from '@aserto/console-common'\n\nimport noConfig from '../../assets/no-users.svg'\nconst EmptyConfigs = () => {\n  return (\n    <PaddedContent>\n      <EmptyTablePlaceholder\n        body={`To add one, click the \"Add\" button in the dropdown .`}\n        header=\"Could not find any configuration\"\n        imgAlt=\"Empty Directory\"\n        imgSrc={noConfig}\n      />\n    </PaddedContent>\n  )\n}\nexport default EmptyConfigs\n"],"names":["ContentContainer","styled","div","_templateObject","_taggedTemplateLiteral","TextArea","_templateObject2","ButtonsContainer","_templateObject3","_ref","bold","_templateObject4","_templateObject5","onHide","show","subject","onClickRemove","onClickHideButton","_jsx","_Fragment","children","CardModal","cardHeight","title","concat","variant","_jsxs","Button","onClick","CONFIGURATION_ADDRESS_REGEXP","getValidityOf","address","test","isValid","ruleText","InputContainer","ConfigureContainer","ConfigureDiv","ConfigureContainerButton","_templateObject6","_ref2","size","_ref3","color","_templateObject7","SelectContainer","_templateObject8","AUTO_CONFIGURATION_TYPE","MANUAL_CONFIGURATION_TYPE","data","useConfiguration","_useActiveConfigurati","useActiveConfigurationName","configName","configurationName","setConfigurationName","_useState","useState","_useState2","_slicedToArray","configType","setConfigType","_useState3","_useState4","automaticAddress","setAutomaticAddress","_useState5","_useState6","apiKey","setApiKey","_useState7","_useState8","isAutomaticGenerated","setIsAutomaticGenerated","_useState9","authorizerServiceUrl","authorizerApiKey","directoryServiceUrl","directoryApiKey","directoryTenantId","directoryReaderServiceUrl","directoryWriterServiceUrl","directoryModelServiceUrl","_useState10","configuration","setConfiguration","handleInputChange","e","_e$target","target","name","value","prevFormData","_objectSpread","_defineProperty","_useState11","_useState12","showDeleteModal","setShowDeleteModal","_useFetchExternalConf","url","options","get","useAsertoApiWithAnonymousAccess","useQuery","path","headerOverrides","authorization","undefined","enabled","retry","staleTime","Infinity","useFetchExternalConfig","onError","error","showError","onSuccess","showMessage","configData","refetch","location","useLocation","useShowError","useShowSuccessMessage","onClickShowDeleteModal","configFields","useMemo","_data$configs","configs","find","configOptions","label","updateConfiguration","useUpdateConfiguration","mutate","_useRemoveConfigurati","useRemoveConfiguration","_","_data$configs2","activeConfig","filter","removeConfiguration","mutateAsync","dataConfigs","isAutomaticAddressValid","ConfigurationAddressValidator","useEffect","configurationType","length","_location$state","_location$state2","state","Object","keys","sort","toString","EmptyConfigs","ManualFields","ActionableInput","disabled","onChange","onClickCopy","copy","placeholder","shouldShowHideShowButton","type","fields","PaddedContent","Select","style","width","option","cfgType","String","DeleteConfirmationModal","redirectUrl","onClickRemoveConfiguration","ValidatedInput","validator","success","EmptyTablePlaceholder","body","header","imgAlt","imgSrc","noConfig"],"sourceRoot":""}
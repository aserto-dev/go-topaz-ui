{"version":3,"file":"static/js/5226.ed6d76b0.chunk.js","mappings":"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","sources":["components/DeleteConfirmationModal/styles.ts","components/DeleteConfirmationModal/index.tsx","lib/validation/ConfigurationAddressValidator.ts","views/ConfigurationsSettings/styles.tsx","views/ConfigurationsSettings/index.tsx","api/externalConfig.ts","assets/no-users.svg","views/EmptyConfigs/index.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const ContentContainer = styled.div`\n  padding: 20px;\n  width: 100%;\n  height: fit-content;\n`\nexport const TextArea = styled.div`\n  font-size: 16px;\n`\n\nexport const ButtonsContainer = styled.div`\n  width: 100%;\n  flex: 1 1 0%;\n  justify-content: flex-start;\n  align-items: flex-start;\n  float: right;\n  display: flex;\n  margin-top: 60px;\n  button:first-of-type {\n    margin-right: 10px;\n  }\n`\n","import React from 'react'\nimport { Button, CardModal } from '@aserto/console-common'\n\nimport { ButtonsContainer, ContentContainer, TextArea } from './styles'\n\ntype DeleteConfirmationModalProps = {\n  redirectUrl: string\n  show: boolean\n  onHide: () => void\n  subject: string\n  onClickRemove: () => void\n}\n\nconst DeleteConfirmationModal: React.FC<DeleteConfirmationModalProps> = ({\n  onHide,\n  show,\n  subject,\n  onClickRemove,\n}) => {\n  const onClickHideButton = onHide\n\n  return (\n    <>\n      <CardModal\n        cardHeight=\"100%\"\n        show={show}\n        title={`Delete ${subject}`}\n        variant=\"delete_danger\"\n        onHide={onClickHideButton}\n      >\n        <ContentContainer>\n          <TextArea>Are you sure you want to delete your {subject}?</TextArea>\n          <ButtonsContainer>\n            <Button variant=\"secondary\" onClick={onClickHideButton}>\n              Cancel\n            </Button>\n            <Button data-testid=\"delete-subject\" variant=\"danger\" onClick={onClickRemove}>\n              Delete\n            </Button>\n          </ButtonsContainer>\n        </ContentContainer>\n      </CardModal>\n    </>\n  )\n}\n\nexport default DeleteConfirmationModal\n","import { Validator, Validity } from '@aserto/console-common'\n\n// Must start with a-z, and must be alphanumeric (or dashes) 6-30 characters\nconst CONFIGURATION_ADDRESS_REGEXP = /^(https?:\\/\\/[a-zA-Z0-9.-]+:\\d+(\\/[a-zA-Z0-9_/]+)?)$/\n\nconst getValidityOf = (address: string): Validity => {\n  if (CONFIGURATION_ADDRESS_REGEXP.test(address)) {\n    return 'VALID'\n  }\n  return 'INVALID'\n}\n\nconst isValid = (address: string) => getValidityOf(address) === 'VALID'\n\nconst ConfigurationAddressValidator: Validator<string> = {\n  getValidityOf,\n  isValid,\n  ruleText: 'Should be formed of an address and a port from topaz. It can be either https or http.',\n}\n\nexport default ConfigurationAddressValidator\n","import styled from 'styled-components'\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin: 1rem 6rem;\n  input {\n    width: 700px;\n  }\n  label {\n    font-size: 14px;\n  }\n`\nexport const ConfigureContainer = styled(InputContainer)`\n  margin: 0rem 6rem;\n`\nexport const ConfigureDiv = styled.div`\n  margin-top: 2rem;\n`\nexport const ConfigureContainerButton = styled.div`\n  margin-bottom: 60px;\n`\n\nexport const ButtonsContainer = styled.div`\n  margin-top: 12px;\n  display: flex;\n  margin-left: 100px;\n  gap: 10px;\n`\nexport const SelectContainer = styled.div`\n  width: 700px;\n`\n","import copy from 'copy-to-clipboard'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport {\n  ActionableInput,\n  Button,\n  PaddedContent,\n  Select,\n  useShowError,\n  useShowSuccessMessage,\n  ValidatedInput,\n} from '@aserto/console-common'\n\nimport { BaseConfiguration, ConfigurationType } from '../../../common/types'\nimport { useFetchExternalConfig } from '../../api/externalConfig'\nimport {\n  useConfiguration,\n  useRemoveConfiguration,\n  useUpdateConfiguration,\n} from '../../api/internal'\nimport DeleteConfirmationModal from '../../components/DeleteConfirmationModal'\nimport ConfigurationAddressValidator from '../../lib/validation/ConfigurationAddressValidator'\nimport { useActiveConfigurationName } from '../../services/ActiveConfiguration'\nimport EmptyConfigs from '../EmptyConfigs'\nimport {\n  ButtonsContainer,\n  ConfigureContainer,\n  ConfigureContainerButton,\n  ConfigureDiv,\n  InputContainer,\n  SelectContainer,\n} from './styles'\n\nconst AUTO_CONFIGURATION_TYPE = 'auto'\nconst MANUAL_CONFIGURATION_TYPE = 'manual'\nconst CENTRAL_DIRECTORY_CONFIGURATION_TYPE = 'central_directory'\n\nconst ConfigurationsSettings: React.FC = () => {\n  const { data } = useConfiguration()\n  const { configurationName: configName, setConfigurationName } = useActiveConfigurationName()\n  const [configType, setConfigType] = useState<ConfigurationType>(AUTO_CONFIGURATION_TYPE)\n  const [automaticAddress, setAutomaticAddress] = useState<string | undefined>('')\n  const [apiKey, setApiKey] = useState<string | undefined>('')\n  const [isAutomaticGenerated, setIsAutomaticGenerated] = useState<boolean>(false)\n  const [configuration, setConfiguration] = useState<BaseConfiguration>({\n    authorizerServiceUrl: '',\n    authorizerApiKey: '',\n    directoryServiceUrl: '',\n    directoryApiKey: '',\n    directoryTenantId: '',\n    directoryReaderServiceUrl: '',\n    directoryWriterServiceUrl: '',\n    directoryModelServiceUrl: '',\n  })\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setConfiguration((prevFormData) => ({\n      ...prevFormData,\n      [name]: value,\n    }))\n  }\n\n  const handleApiKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setApiKey(e.target.value)\n  }\n\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\n  const { data: configData, refetch } = useFetchExternalConfig(automaticAddress!, apiKey, {\n    enabled: false,\n    onError: (error) => {\n      showError(error)\n    },\n    onSuccess: () => {\n      showMessage('Configuration generated successfully.')\n    },\n  })\n\n  const location = useLocation()\n\n  const showError = useShowError()\n  const showMessage = useShowSuccessMessage()\n  const onClickShowDeleteModal = () => {\n    setShowDeleteModal(true)\n  }\n\n  const configFields = useMemo(() => {\n    return data?.configs?.find((e) => e.name === configName)\n  }, [configName, data?.configs])\n\n  const configOptions = [\n    { label: 'Automatic', value: AUTO_CONFIGURATION_TYPE },\n    { label: 'Manual', value: MANUAL_CONFIGURATION_TYPE },\n    { label: 'Central Directory', value: CENTRAL_DIRECTORY_CONFIGURATION_TYPE },\n  ]\n\n  const { mutate: updateConfiguration } = useUpdateConfiguration({\n    onError: (e) => {\n      showError(e)\n    },\n    onSuccess: () => {\n      showMessage('Configuration updated successfully.')\n    },\n  })\n\n  const { mutateAsync: removeConfiguration } = useRemoveConfiguration({\n    onSuccess: () => {\n      showMessage('Configuration deleted successfully.')\n      const activeConfig = (data?.configs?.filter((data) => data.name !== configName) || [])[0]\n        ?.name\n      if (activeConfig) {\n        setConfigurationName(activeConfig)\n      } else {\n        setConfigurationName('')\n      }\n    },\n    onError: (error) => {\n      showError(error)\n    },\n  })\n\n  const onClickRemoveConfiguration = (configName: string) => {\n    if (configName) {\n      removeConfiguration(configName)\n    }\n  }\n\n  const dataConfigs = useMemo(() => {\n    return configData?.configs || []\n  }, [configData?.configs])\n\n  const isAutomaticAddressValid = useMemo(() => {\n    return ConfigurationAddressValidator.isValid(automaticAddress!)\n  }, [automaticAddress])\n\n  useEffect(() => {\n    if (configFields?.configurationType) {\n      setConfigType(configFields?.configurationType as ConfigurationType)\n    }\n  }, [configFields?.configurationType, setConfigType])\n\n  useEffect(() => {\n    if (configFields) {\n      setConfiguration(configFields)\n    }\n  }, [configFields, setConfiguration])\n\n  useEffect(() => {\n    if (configFields?.address) {\n      setAutomaticAddress(configFields.address)\n    }\n  }, [, configFields?.address, setAutomaticAddress])\n\n  useEffect(() => {\n    if (dataConfigs.length > 0) {\n      setConfiguration(dataConfigs[0])\n      setIsAutomaticGenerated(true)\n    }\n  }, [dataConfigs, setConfiguration, setIsAutomaticGenerated])\n\n  useEffect(() => {\n    if (\n      location.state?.configuration &&\n      Object.keys(configFields || {})\n        .sort()\n        .toString() === ['name'].toString()\n    ) {\n      setConfigType(AUTO_CONFIGURATION_TYPE)\n      setAutomaticAddress('')\n      setApiKey('')\n      setIsAutomaticGenerated(false)\n      setConfiguration(location.state?.configuration)\n    }\n  }, [\n    location.state,\n    setConfiguration,\n    setConfigType,\n    setAutomaticAddress,\n    setIsAutomaticGenerated,\n    configFields,\n  ])\n\n  useEffect(() => {\n    if (configFields?.address) {\n      setIsAutomaticGenerated(true)\n    }\n  }, [configFields?.address, setIsAutomaticGenerated])\n\n  if (!data || !data.configs || data.configs.length === 0) {\n    return <EmptyConfigs></EmptyConfigs>\n  }\n\n  const ManualFields = (\n    <>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Service Address\"\n          name=\"directoryServiceUrl\"\n          value={configuration.directoryServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory API Key\"\n          name=\"directoryApiKey\"\n          placeholder={\n            configuration?.directoryApiKey\n              ? '****************************************************************'\n              : ''\n          }\n          shouldShowHideShowButton\n          type=\"password\"\n          value={configuration.directoryApiKey}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Director Tenant ID\"\n          name=\"directoryTenantId\"\n          value={configuration.directoryTenantId}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Authorizer Service Address\"\n          name=\"authorizerServiceUrl\"\n          value={configuration.authorizerServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Authorizer API Key\"\n          name=\"authorizerApiKey\"\n          placeholder={\n            configuration?.authorizerApiKey\n              ? '****************************************************************'\n              : ''\n          }\n          shouldShowHideShowButton\n          type=\"password\"\n          value={configuration.authorizerApiKey}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Reader Service Address\"\n          name=\"directoryReaderServiceUrl\"\n          value={configuration.directoryReaderServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Writer Service Address\"\n          name=\"directoryWriterServiceUrl\"\n          value={configuration.directoryWriterServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <ActionableInput\n          disabled={configType === AUTO_CONFIGURATION_TYPE}\n          label=\"Directory Model Service Address\"\n          name=\"directoryModelServiceUrl\"\n          value={configuration.directoryModelServiceUrl}\n          onChange={handleInputChange}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <ButtonsContainer>\n        <Button\n          onClick={() =>\n            updateConfiguration({\n              name: configName,\n              fields: {\n                configurationType: configType,\n                name: configName,\n                address: automaticAddress,\n                directoryServiceUrl: configuration.directoryServiceUrl,\n                authorizerServiceUrl: configuration.authorizerServiceUrl,\n                authorizerApiKey: configuration.authorizerApiKey,\n                directoryApiKey: configuration.directoryApiKey,\n                directoryTenantId: configuration.directoryTenantId,\n                directoryReaderServiceUrl: configuration.directoryReaderServiceUrl,\n                directoryWriterServiceUrl: configuration.directoryWriterServiceUrl,\n                directoryModelServiceUrl: configuration.directoryModelServiceUrl,\n              },\n            })\n          }\n        >\n          Save\n        </Button>\n        <Button variant=\"danger\" onClick={onClickShowDeleteModal}>\n          Delete\n        </Button>\n      </ButtonsContainer>\n    </>\n  )\n  return (\n    <PaddedContent>\n      <InputContainer>\n        <ActionableInput\n          disabled\n          label=\"Configuration Name\"\n          value={configName}\n          onClickCopy={copy}\n        />\n      </InputContainer>\n      <InputContainer>\n        <SelectContainer>\n          <Select\n            label=\"Configuration Type\"\n            options={configOptions}\n            style={{ width: '700px' }}\n            value={configOptions.find((option) => option.value === configType) || configOptions[0]}\n            onChange={(option) => {\n              const cfgType = String(option?.value) as ConfigurationType\n              if (cfgType === AUTO_CONFIGURATION_TYPE) {\n                setConfiguration(configFields!)\n              }\n              setConfigType(cfgType)\n            }}\n          />\n        </SelectContainer>\n      </InputContainer>\n\n      <DeleteConfirmationModal\n        redirectUrl=\"/\"\n        show={showDeleteModal}\n        subject=\"Configuration\"\n        onClickRemove={() => {\n          onClickRemoveConfiguration(configName!)\n          setShowDeleteModal(false)\n        }}\n        onHide={() => setShowDeleteModal(false)}\n      />\n      <ConfigureDiv>\n        {configType === AUTO_CONFIGURATION_TYPE ? (\n          <ConfigureDiv>\n            {configType === AUTO_CONFIGURATION_TYPE && (\n              <ConfigureContainerButton>\n                <ConfigureContainer>\n                  <ValidatedInput\n                    label=\"Configuration address\"\n                    placeholder=\"https://localhost:8080\"\n                    validator={ConfigurationAddressValidator}\n                    value={automaticAddress}\n                    onChange={setAutomaticAddress}\n                    onClickCopy={copy}\n                  />\n                </ConfigureContainer>\n                <InputContainer>\n                  <ActionableInput\n                    label=\"API key(required only for an address that has authentication enabled)\"\n                    shouldShowHideShowButton\n                    type=\"password\"\n                    value={apiKey}\n                    onChange={handleApiKeyChange}\n                    onClickCopy={copy}\n                  />\n                </InputContainer>\n                <ButtonsContainer>\n                  <Button\n                    disabled={!isAutomaticAddressValid}\n                    onClick={() => {\n                      refetch()\n                    }}\n                  >\n                    Generate configuration\n                  </Button>\n                  {!configData?.success && !configFields?.address && (\n                    <Button variant=\"danger\" onClick={onClickShowDeleteModal}>\n                      Delete\n                    </Button>\n                  )}\n                </ButtonsContainer>\n              </ConfigureContainerButton>\n            )}\n            {isAutomaticGenerated ? ManualFields : <></>}\n          </ConfigureDiv>\n        ) : configType === MANUAL_CONFIGURATION_TYPE ? (\n          ManualFields\n        ) : (\n          <>\n            <InputContainer>\n              <ActionableInput\n                label=\"Directory Service Address\"\n                name=\"directoryServiceUrl\"\n                value={configuration.directoryServiceUrl}\n                onChange={handleInputChange}\n                onClickCopy={copy}\n              />\n            </InputContainer>\n            <InputContainer>\n              <ActionableInput\n                label=\"Directory API Key\"\n                name=\"directoryApiKey\"\n                shouldShowHideShowButton\n                type=\"password\"\n                value={configuration.directoryApiKey}\n                onChange={handleInputChange}\n                onClickCopy={copy}\n              />\n            </InputContainer>\n            <InputContainer>\n              <ActionableInput\n                label=\"Directory Tenant ID\"\n                name=\"directoryTenantId\"\n                value={configuration.directoryTenantId}\n                onChange={handleInputChange}\n                onClickCopy={copy}\n              />\n            </InputContainer>\n            <ButtonsContainer>\n              <Button\n                disabled={\n                  !configuration.directoryTenantId ||\n                  !configuration.directoryServiceUrl ||\n                  !configuration.directoryApiKey\n                }\n                onClick={() =>\n                  updateConfiguration({\n                    name: configName,\n                    fields: {\n                      configurationType: configType,\n                      name: configName,\n                      directoryServiceUrl: configuration.directoryServiceUrl,\n                      directoryApiKey: configuration.directoryApiKey,\n                      directoryTenantId: configuration.directoryTenantId,\n                    },\n                  })\n                }\n              >\n                Save\n              </Button>\n              <Button variant=\"danger\" onClick={onClickShowDeleteModal}>\n                Delete\n              </Button>\n            </ButtonsContainer>\n          </>\n        )}\n      </ConfigureDiv>\n    </PaddedContent>\n  )\n}\n\nexport default ConfigurationsSettings\n","import { useAsertoApiWithAnonymousAccess } from '@aserto/console-common'\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query'\n\nimport { BaseConfiguration } from '../../common/types'\nimport { QueryKeys } from '../types/local/general'\nimport { RpcStatus } from '../types/local/tenant'\ntype ConfigDataResponse = {\n  success: boolean\n} & { configs: BaseConfiguration[] }\n\nexport const useFetchExternalConfig = (\n  url: string,\n  apiKey?: string,\n  options?: Omit<\n    UseQueryOptions<ConfigDataResponse, RpcStatus, ConfigDataResponse, QueryKeys[]>,\n    'queryKey' | 'queryFn' | 'retry' | 'staleTime'\n  >\n) => {\n  const { get } = useAsertoApiWithAnonymousAccess(url)\n  return useQuery(\n    [url as QueryKeys],\n    () =>\n      get<ConfigDataResponse>({\n        path: '',\n        headerOverrides: apiKey ? { authorization: `Basic ${apiKey}` } : undefined,\n      }),\n    {\n      ...options,\n      enabled: !!url && options?.enabled,\n      retry: false,\n      staleTime: Infinity,\n    }\n  )\n}\n","var _defs, _g;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgNoUsers(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: 200,\n    height: 200,\n    viewBox: \"0 0 200 200\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip-path\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle_1\",\n    \"data-name\": \"Rectangle 1\",\n    width: 82,\n    height: 82,\n    fill: \"#a0a0a0\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip-No-users\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 200,\n    height: 200\n  })))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"No-users\",\n    clipPath: \"url(#clip-No-users)\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_3\",\n    \"data-name\": \"Ellipse 3\",\n    cx: 100,\n    cy: 100,\n    r: 100,\n    fill: \"#2a2a2a\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"User\",\n    transform: \"translate(59 59)\",\n    clipPath: \"url(#clip-path)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"noun_User_1994976\",\n    transform: \"translate(-3.913 -2.5)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group_2\",\n    \"data-name\": \"Group 2\",\n    transform: \"translate(12.7 2.5)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group_1\",\n    \"data-name\": \"Group 1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_1\",\n    \"data-name\": \"Path 1\",\n    d: \"M61.84,48.965a1.293,1.293,0,0,0-1.555.086A25.591,25.591,0,0,1,44.913,54.06,26.175,26.175,0,0,1,29.54,49.052a1.451,1.451,0,0,0-1.555-.086C17.8,55.529,12.7,68.4,12.7,83.164c0,10.191,64.425,10.191,64.425,0C77.125,68.4,72.03,55.529,61.84,48.965Z\",\n    transform: \"translate(-12.7 -8.807)\",\n    fill: \"#a0a0a0\"\n  }), /*#__PURE__*/React.createElement(\"circle\", {\n    id: \"Ellipse_1\",\n    \"data-name\": \"Ellipse 1\",\n    cx: 19.259,\n    cy: 19.259,\n    r: 19.259,\n    transform: \"translate(12.954 0)\",\n    fill: \"#a0a0a0\"\n  }))))))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNoUsers);\nexport default __webpack_public_path__ + \"static/media/no-users.608b3a7e4f53bf42798a4f2a5be4c011.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\nimport { EmptyTablePlaceholder, PaddedContent } from '@aserto/console-common'\n\nimport noConfig from '../../assets/no-users.svg'\nconst EmptyConfigs = () => {\n  return (\n    <PaddedContent>\n      <EmptyTablePlaceholder\n        body={`To add one, click the \"Add\" button in the dropdown .`}\n        header=\"Could not find any configuration\"\n        imgAlt=\"Empty Directory\"\n        imgSrc={noConfig}\n      />\n    </PaddedContent>\n  )\n}\nexport default EmptyConfigs\n"],"names":["ContentContainer","styled","div","TextArea","ButtonsContainer","_ref","onHide","show","subject","onClickRemove","onClickHideButton","_jsx","_Fragment","children","CardModal","cardHeight","title","variant","_jsxs","Button","onClick","CONFIGURATION_ADDRESS_REGEXP","getValidityOf","address","test","isValid","ruleText","InputContainer","ConfigureContainer","ConfigureDiv","ConfigureContainerButton","SelectContainer","AUTO_CONFIGURATION_TYPE","MANUAL_CONFIGURATION_TYPE","ConfigurationsSettings","data","useConfiguration","configurationName","configName","setConfigurationName","useActiveConfigurationName","configType","setConfigType","useState","automaticAddress","setAutomaticAddress","apiKey","setApiKey","isAutomaticGenerated","setIsAutomaticGenerated","configuration","setConfiguration","authorizerServiceUrl","authorizerApiKey","directoryServiceUrl","directoryApiKey","directoryTenantId","directoryReaderServiceUrl","directoryWriterServiceUrl","directoryModelServiceUrl","handleInputChange","e","name","value","target","prevFormData","showDeleteModal","setShowDeleteModal","configData","refetch","useFetchExternalConfig","url","options","get","useAsertoApiWithAnonymousAccess","useQuery","path","headerOverrides","authorization","undefined","enabled","retry","staleTime","Infinity","onError","error","showError","onSuccess","showMessage","location","useLocation","useShowError","useShowSuccessMessage","onClickShowDeleteModal","configFields","useMemo","_data$configs","configs","find","configOptions","label","mutate","updateConfiguration","useUpdateConfiguration","mutateAsync","removeConfiguration","useRemoveConfiguration","_","_data$configs2","activeConfig","filter","dataConfigs","isAutomaticAddressValid","ConfigurationAddressValidator","useEffect","configurationType","length","_location$state","_location$state2","state","Object","keys","sort","toString","EmptyConfigs","ManualFields","ActionableInput","disabled","onChange","onClickCopy","copy","placeholder","shouldShowHideShowButton","type","fields","PaddedContent","Select","style","width","option","cfgType","String","DeleteConfirmationModal","redirectUrl","onClickRemoveConfiguration","ValidatedInput","validator","success","EmptyTablePlaceholder","body","header","imgAlt","imgSrc","noConfig"],"sourceRoot":""}